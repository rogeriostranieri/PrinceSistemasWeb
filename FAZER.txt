import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatTabsModule } from '@angular/material/tabs';
import { RouterModule, Router, Params } from '@angular/router';
import { ActivatedRoute } from '@angular/router';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatInputModule } from '@angular/material/input';
import { MatNativeDateModule } from '@angular/material/core';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import Swal from 'sweetalert2';
import { EventosSelectorComponent } from '../eventos-selector/eventos-selector.component';
import { MatCheckboxModule } from '@angular/material/checkbox';
import * as moment from 'moment';
import 'moment/locale/pt-br';

export interface Empresa {
  respcnh: string;
  respcnhexpedicao: Date | null;
  id_empresas: number;
  razaosocial: string;
  nomefantasia?: string;
  cnpj?: string;
  endereco?: string;
  endnumero?: string;
  endbairro?: string;
  endcomplemento?: string;
  endcep?: string;
  endcidade?: string;
  endestado?: string;
  endpais?: string;
  emptel1?: string;
  emptel2?: string;
  empemail?: string;
  paginaweb?: string;
  ie?: string;
  im?: string;
  naturezajuridica?: string;
  empinicioatividade?: Date | null;
  empcriado?: Date | null;
  dataprotredesim?: Date | null;
  dataprotjuntacomercial?: Date | null;
  datapedidoie?: Date | null;
  dataregistroalt?: Date | null;
  datamotivo?: Date | null;
  ieinicioatividade?: Date | null;
  ievencpedido?: Date | null;
  datasimples?: Date | null;
  dataultdefsimples?: Date | null;
  dataexcsocial?: Date | null;
  cnhdataexp?: Date | null;
  respdatanasc?: Date | null;
  enddata?: Date | null;
  procuracaodata?: Date | null;
  nireregistrodata?: Date | null;
  iedataaltsolicitado?: Date | null;
  niredata?: Date | null;
  dbedata?: Date | null;
  avisardia?: Date | null;
  prazosimples?: Date | null;
  protjuntafinal?: Date | null;
  processo?: string;
  status?: string;
  nire?: string;
  cnaeprincipal?: string;
  cnaesecundario?: string;
  ramodeatividade?: string;
  responsavelcpf?: string;
  responsavelnome?: string;
  protocolojuntacomercial?: string;
  geral?: string;
  protocoloredesim?: string;
  nirealt?: string;
  juntaobs?: string;
  nregistroalt?: string;
  nireantigos?: string;
  nalteracao?: string;
  redesimobs?: string;
  estadualobs?: string;
  prefeituraobs?: string;
  codigosimples?: string;
  cpfresponsavel?: string;
  nomeresponsavel?: string;
  arquivocontrato?: string;
  procedimento?: string;
  regimefederal?: string;
  portedaempresa?: string;
  tipodeempresa?: string;
  altconsolidada?: string;
  motivo?: string;
  iecomprovante?: string;
  bombeirojunta?: string;
  iejunta?: string;
  tituloeleitor?: string;
  area?: string;
  area2?: string;
  obssimples?: string;
  orgaopedsimples?: string;
  pastadocumentos?: string;
  resprg?: string;
  historico?: string;
  altprot?: string;
  capitals?: string;
  capitali?: string;
  cnhnumero?: string;
  cnhexp?: string;
  respmae?: string;
  cadimob?: string;
  endzona?: string;
  endquadra?: string;
  resprgsigla?: string;
  procuracao?: string;
  procuracaon?: string;
  novarazaosocial1?: string;
  novarazaosocial2?: string;
  novarazaosocial3?: string;
  novarazaosocial?: string;
  eventos?: string;
  senhagov?: string;
  resppai?: string;
  nireregistro?: string;
  novarazaosocialfinal?: string;
  ieonline?: string;
  ietipo?: string;
  ieeprocnum?: string;
  sistemaexterno?: string;
  dadossocios?: string;
  quantidadesocios?: string;
  doccontratos?: string;
  razaosocialantiga?: string;
  situacaocadastral?: string;
  divisaocapitalsocios?: string;
  capitalquotavalor?: string;
  capitaquotatotal?: string;
  cpfdoconjuge?: string;
  nomedoconjuge?: string;
  responsavelorgaorg?: string;
  responsavelestadoorgaorg?: string;
  numeroprocesso?: string;
  reciboprocesso?: string;
  sede?: string;
  pontodereferencia?: string;
  tipounidadeprodutiva?: string;
  formadeatuacao?: string;
  dadoscomplestabelecimento?: string;
  dadoscomplatividade?: string;
  dadoscomplpavimentos?: string;
  dadoscomplpessoas?: string;
  dadoscomplsubsolo?: string;
  dadoscomplliquido?: string;
  dadoscomplglp?: string;
  ajudatipodeunidade?: string;
  dbeprotocolo?: string;
  federalprotocolo?: string;
  senhasdeacesso?: string;
  capitalsocialantigo?: string;
  capitalantigomudou?: string;
  cnaeatividadenolocal?: string;
  cnaeatvlocalprincipal?: string;
  cnaeatvlocalsecundarios?: string;
  bombeiroatvadm?: string;
  bombeiroatvresidencia?: string;
  cnaedescricaooficial?: string;
  objetodoestabelecimento?: string;
  simplesecac?: string;
  avisarempresa?: boolean | 'Sim' | 'Não' | null;
  prioridade?: boolean | 'Sim' | 'Não' | null;
  lembrete?: boolean | 'Sim' | 'Não' | null;
  temenderecoantigoemp?: string;
  enderecoantigoemp?: string;
  codsistemaexterno?: string;
  status_id?: number;
  avisarempresatexto?: string;
}

export interface NaturezaJuridica {
  ID_Naturezajuridica: number;
  Descricao: string;
}

interface CADstatus {
  ID_CADstatus: number;
  Descricao: string;
}

// Defina um tipo para sócio (ajuste conforme sua estrutura real)
interface Socio {
  id_socios: number;
  cpf: string;
  nomecompleto: string;
  rg?: string;
  orgaorg?: string;
  orgao_rg?: string;
  estadorg?: string;
  estado_rg?: string;
  data_nascimento?: string;
  datadenasc?: string;
  civil?: string;
  estado_civil?: string;
  nacionalidade?: string;
  profissao?: string;
  rua?: string;
  num?: string;
  complemento?: string;
  bairro?: string;
  cep?: string;
  cidade?: string;
  estado?: string;
  uf?: string;
  cnh?: string;
  cnhexpedicao?: string;
  cnhdataexp?: string;
  nomemae?: string;
  nomepai?: string;
  telefone1?: string;
  telefone2?: string;
  email?: string;
  genero?: string;
  cpfdoconjuge?: string;
  nomedoconjuge?: string;
  outrosdados?: string;
  menoridade?: string;
  menoridade_tipo?: string;
  registroorgao?: string;
  registroestado?: string;
  registronumero?: string;
  registrodata?: string;
  titulodeeleitor?: string;
  senhagov?: string;
  pais?: string;
}

@Component({
  selector: 'app-empresas',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatIconModule,
    MatButtonModule,
    MatMenuModule,
    MatFormFieldModule,
    MatSelectModule,
    MatTabsModule,
    RouterModule,
    MatDatepickerModule,
    MatInputModule,
    MatNativeDateModule,
    MatCheckboxModule,
    EventosSelectorComponent,
  ],
  providers: [DatePipe],
  templateUrl: './empresas.component.html',
  styleUrls: ['./empresas.component.scss'],
})
export class EmpresasComponent implements OnInit {
  empresas: Empresa[] = [];
  selectedEmpresaId: string = '';
  selectedEmpresa: Empresa | null = null;
  loading: boolean = false;
  naturezasJuridicas: NaturezaJuridica[] = [];
  isEditing: boolean = false;
  originalEmpresa: Empresa | null = null;
  isMenuOpen: boolean = false;
  sideMenuIndex: number = 0;
  dadosSubMenu: number = 0;
  empresaFacilTab: number = 0;
  showEventosSelector: boolean = false;
  processoOptions: string[] = ['Abertura', 'Alteração', 'Baixa'];
  statusList: CADstatus[] = [];
  apiUrl = 'http://127.0.0.1:8000/api/empresas/';
  statusApiUrl = 'http://127.0.0.1:8000/api/cadastro-status/';
  fileToUpload: File | null = null;
  fileUrl: SafeUrl | null = null;
  showSociosSelector: boolean = false;
  socioModalTipo: 'responsavel' | 'dadossocios' | null = null;
  buscaSocio = '';
  socios: Socio[] = []; // Preencha com os sócios do seu backend

  private dateFields = [
    'avisardia', 'prazosimples', 'empinicioatividade', 'empcriado',
    'dataprotredesim', 'dataprotjuntacomercial', 'datapedidoie',
    'dataregistroalt', 'datamotivo', 'ieinicioatividade',
    'ievencpedido', 'datasimples', 'dataultdefsimples',
    'dataexcsocial', 'cnhdataexp', 'respdatanasc', 'enddata',
    'procuracaodata', 'nireregistrodata', 'iedataaltsolicitado',
    'niredata', 'dbedata', 'protjuntafinal'
  ];

  constructor(
    private http: HttpClient,
    private router: Router,
    private datePipe: DatePipe,
    private route: ActivatedRoute,
    private sanitizer: DomSanitizer
  ) {
    moment.locale('pt-br'); // Define o locale para português do Brasil
  }

  ngOnInit(): void {
    this.route.params.subscribe((params: Params) => {
      if (params['id']) {
        this.loadEmpresaById(+params['id']);
      } else {
        this.fetchEmpresas();
      }
    });
    this.fetchNaturezasJuridicas();
    this.loadStatus();

    window.addEventListener('beforeunload', (event) => {
      if (this.isEditing) {
        event.preventDefault();
        event.returnValue = '';
      }
    });
  }

  private normalize(str: string | undefined | null): string {
    return (str || '')
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // remove acentos
      .replace(/\s+/g, '')             // remove espaços
      .toLowerCase();
  }

  private showAvisarEmpresaPopup(): void {
    if (
      this.selectedEmpresa &&
      this.selectedEmpresa.avisarempresa === true &&
      this.selectedEmpresa.avisarempresatexto?.trim()
    ) {
      this.showAvisarEmpresaPopup();
    }
  }

  public formatBR(date: Date | null): string {
    if (!date) return '';
    
    if (date instanceof Date && !isNaN(date.getTime())) {
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }
    
    return '';
  }

  private parseBR(dateStr: string | null | undefined): Date | null {
    if (!dateStr) return null;
    if (dateStr.includes('/')) {
      const [day, month, year] = dateStr.split('/').map((part) => parseInt(part, 10));
      return new Date(year, month - 1, day);
    }
    // Aceita formato ISO do backend
    if (dateStr.includes('-')) {
      // Pode ser "2025-05-15" ou "2025-05-15 00:00:00+00"
      const parts = dateStr.split(' ')[0].split('-');
      if (parts.length === 3) {
        const [year, month, day] = parts.map((part) => parseInt(part, 10));
        return new Date(year, month - 1, day);
      }
    }
    return null;
  }

  private toIsoDate(date: Date | string | null | undefined): string | null {
    if (!date) return null;
    if (date instanceof Date) {
      // Garante que está no fuso correto
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    if (typeof date === 'string' && date.includes('/')) {
      const [day, month, year] = date.split('/');
      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    }
    return date;
  }

  dataPorExtenso(dataStr: string): string {
    if (!dataStr) return '';
    const [dia, mes, ano] = dataStr.split('/');
    const meses = [
      '', 'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho',
      'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'
    ];
    return `${dia} de ${meses[parseInt(mes, 10)]} de ${ano}`;
  }

  private formatarLogradouro(logradouro?: string): string {
    if (!logradouro) return '';
    const partes = logradouro.split(' ');
    if (partes.length > 1) {
      return partes[0].toLowerCase() + ' ' + partes.slice(1).join(' ');
    }
    return logradouro.toLowerCase();
  }

  fetchEmpresas(): void {
    this.loading = true;
    this.http.get<Empresa[]>(this.apiUrl).subscribe({
      next: (data) => {
        this.empresas = data.map((empresa) => this.parseEmpresaDates(empresa));
        this.loading = false;
      },
      error: (err) => {
        console.error('Erro ao buscar empresas:', err);
        this.loading = false;
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Não foi possível carregar as empresas.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      },
    });
  }

  fetchEmpresasByAvisarDia(date: Date | string): void {
    this.loading = true;
    const formattedDate = this.toIsoDate(date instanceof Date ? date : this.parseBR(date));
    if (!formattedDate) {
      Swal.fire({
        icon: 'error',
        title: 'Erro',
        text: 'Data inválida para busca.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      this.loading = false;
      return;
    }

    this.http.get<Empresa[]>(`${this.apiUrl}?avisardia=${formattedDate}`).subscribe({
      next: (data) => {
        this.empresas = data.map((empresa) => this.parseEmpresaDates(empresa));
        this.loading = false;
      },
      error: (err) => {
        console.error('Erro ao buscar empresas por avisardia:', err);
        this.loading = false;
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Não foi possível carregar as empresas por data de lembrete.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      },
    });
  }

  loadEmpresaById(id: number): void {
    this.loading = true;
    this.http.get<Empresa>(`${this.apiUrl}${id}/`).subscribe({
      next: (data) => {
        this.selectedEmpresa = this.parseEmpresaDates(data);
        this.selectedEmpresaId = data.id_empresas.toString();
        this.empresas = this.empresas.some((e) => e.id_empresas === data.id_empresas)
          ? this.empresas
          : [...this.empresas, data];
        this.loading = false;
        // Mostra o popup só se avisarempresa for true e houver texto
        if (
          this.selectedEmpresa &&
          this.selectedEmpresa.avisarempresa === true &&
          this.selectedEmpresa.avisarempresatexto?.trim()
        ) {
          this.showAvisarEmpresaPopup();
        }
      },
      error: (err) => {
        console.error('Erro ao buscar empresa:', err);
        this.loading = false;
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Não foi possível carregar a empresa.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      },
    });
  }

  private parseEmpresaDates(empresa: any): any {
    const parsedEmpresa = { ...empresa };
    this.dateFields.forEach((field) => {
      const dateStr = (parsedEmpresa as any)[field] as string | null;
      (parsedEmpresa as any)[field] = this.parseBR(dateStr);
    });

    parsedEmpresa.lembrete =
      ['sim', 'true', '1', 'checked', 'on', true].includes(
        typeof parsedEmpresa.lembrete === 'string'
          ? parsedEmpresa.lembrete.trim().toLowerCase()
          : parsedEmpresa.lembrete === true
            ? true
            : false
      );
    parsedEmpresa.prioridade =
      ['sim', 'true', '1', 'checked', 'on', true].includes(
        typeof parsedEmpresa.prioridade === 'string'
          ? parsedEmpresa.prioridade.trim().toLowerCase()
          : parsedEmpresa.prioridade === true
            ? true
            : false
      );
    parsedEmpresa.avisarempresa =
      ['sim', 'true', '1', 'checked', 'on', true].includes(
        typeof parsedEmpresa.avisarempresa === 'string'
          ? parsedEmpresa.avisarempresa.trim().toLowerCase()
          : parsedEmpresa.avisarempresa === true
            ? true
            : false
      );

    // Garante que avisardia é Date ou null
    if (parsedEmpresa.avisardia && typeof parsedEmpresa.avisardia === 'string') {
      parsedEmpresa.avisardia = this.parseBR(parsedEmpresa.avisardia);
    }

    return parsedEmpresa;
  }

  private formatEmpresaDates(empresa: Empresa): any {
    const formattedEmpresa = { ...empresa };
    this.dateFields.forEach((field) => {
      const date = (formattedEmpresa as any)[field] as Date | null;
      if (field === 'avisardia') {
        (formattedEmpresa as any)[field] = this.toIsoDate(date);
      } else {
        (formattedEmpresa as any)[field] = this.formatBR(date);
      }
    });

    // Salva como 'Sim' ou 'Não'
    formattedEmpresa.avisarempresa = empresa.avisarempresa === true ? 'Sim' : 'Não';
    formattedEmpresa.lembrete = empresa.lembrete === true ? 'Sim' : 'Não';
    formattedEmpresa.prioridade = empresa.prioridade === true ? 'Sim' : 'Não';

    return formattedEmpresa;
  }

  limparDatasInvalidas(obj: any) {
    for (const campo of this.dateFields) {
      if (
        obj[campo] === '  /  /' ||
        obj[campo] === '' ||
        obj[campo] === null ||
        obj[campo] === undefined ||
        obj[campo] === 'null' ||
        obj[campo] === 'None' ||
        obj[campo] === '00/00/0000'
      ) {
        obj[campo] = null;
      }
    }
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.fileToUpload = input.files[0];
      const reader = new FileReader();
      reader.onload = () => {
        const base64String = (reader.result as string).split(',')[1];
        if (this.selectedEmpresa) {
          this.selectedEmpresa.doccontratos = base64String;
          this.fileUrl = this.sanitizer.bypassSecurityTrustUrl(`data:application/pdf;base64,${base64String}`);
        }
      };
      reader.readAsDataURL(this.fileToUpload);
    }
  }

  getFileUrl(): SafeUrl | null {
    if (this.selectedEmpresa?.doccontratos) {
      return this.sanitizer.bypassSecurityTrustUrl(`data:application/pdf;base64,${this.selectedEmpresa.doccontratos}`);
    }
    return null;
  }

  onSalvar(): void {
    if (!this.selectedEmpresa) {
      Swal.fire({
        icon: 'warning',
        title: 'Atenção',
        text: 'Nenhuma empresa selecionada para salvar.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    // Validação: se avisarempresa = true, texto obrigatório
    if (this.selectedEmpresa.avisarempresa === true && !this.selectedEmpresa.avisarempresatexto?.trim()) {
      Swal.fire({
        icon: 'warning',
        title: 'Aviso',
        text: 'Preencha o campo "Texto Aviso Empresa" ou marque "Avisar Empresa" como Não.',
        buttonsStyling: false,
        customClass: { confirmButton: 'swal2-confirm-btn' },
      });
      return;
    }

    this.limparDatasInvalidas(this.selectedEmpresa);
    this.loading = true;

    const empresaData = this.formatEmpresaDates({ ...this.selectedEmpresa });
    const isNew = !this.selectedEmpresa.id_empresas;

    const payload: any = {
      razaosocial: empresaData.razaosocial,
      nomefantasia: empresaData.nomefantasia,
      cnpj: empresaData.cnpj,
      endereco: empresaData.endereco,
      endnumero: empresaData.endnumero,
      endbairro: empresaData.endbairro,
      endcomplemento: empresaData.endcomplemento,
      endcep: empresaData.endcep,
      endcidade: empresaData.endcidade,
      endestado: empresaData.endestado,
      endpais: empresaData.endpais,
      emptel1: empresaData.emptel1,
      emptel2: empresaData.emptel2,
      empemail: empresaData.empemail,
      paginaweb: empresaData.paginaweb,
      ie: empresaData.ie,
      im: empresaData.im,
      naturezajuridica: empresaData.naturezajuridica,
      empinicioatividade: empresaData.empinicioatividade,
      empcriado: empresaData.empcriado,
      dataprotredesim: empresaData.dataprotredesim,
      dataprotjuntacomercial: empresaData.dataprotjuntacomercial,
      datapedidoie: empresaData.datapedidoie,
      dataregistroalt: empresaData.dataregistroalt,
      datamotivo: empresaData.datamotivo,
      ieinicioatividade: empresaData.ieinicioatividade,
      ievencpedido: empresaData.ievencpedido,
      datasimples: empresaData.datasimples,
      dataultdefsimples: empresaData.dataultdefsimples,
      dataexcsocial: empresaData.dataexcsocial,
      cnhdataexp: empresaData.cnhdataexp,
      respdatanasc: empresaData.respdatanasc,
      enddata: empresaData.enddata,
      procuracaodata: empresaData.procuracaodata,
      nireregistrodata: empresaData.nireregistrodata,
      iedataaltsolicitado: empresaData.iedataaltsolicitado,
      niredata: empresaData.niredata,
      dbedata: empresaData.dbedata,
      avisardia: empresaData.avisardia,
      prazosimples: empresaData.prazosimples,
      protjuntafinal: empresaData.protjuntafinal,
      processo: empresaData.processo,
      status: empresaData.status,
      nire: empresaData.nire,
      cnaeprincipal: empresaData.cnaeprincipal,
      cnaesecundario: empresaData.cnaesecundario,
      ramodeatividade: empresaData.ramideatividade,
      responsavelcpf: empresaData.responsavelcpf,
      responsavelnome: empresaData.responsavelnome,
      protocolojuntacomercial: empresaData.protocolojuntacomercial,
      geral: empresaData.geral,
      protocoloredesim: empresaData.protocoloredesim,
      nirealt: empresaData.nirealt,
      juntaobs: empresaData.juntaobs,
      nregistroalt: empresaData.nregistroalt,
      nireantigos: empresaData.nireantigos,
      nalteracao: empresaData.nalteracao,
      redesimobs: empresaData.redesimobs,
      estadualobs: empresaData.estadualobs,
      prefeituraobs: empresaData.prefeituraobs,
      codigosimples: empresaData.codigosimples,
      cpfresponsavel: empresaData.cpfresponsavel,
      nomeresponsavel: empresaData.nomeresponsavel,
      arquivocontrato: empresaData.arquivocontrato,
      procedimento: empresaData.procedimento,
      regimefederal: empresaData.regimefederal,
      portedaempresa: empresaData.portedaempresa,
      tipodeempresa: empresaData.tipodeempresa,
      altconsolidada: empresaData.altconsolidada,
      motivo: empresaData.motivo,
      iecomprovante: empresaData.iecomprovante,
      bombeirojunta: empresaData.bombeirojunta,
      iejunta: empresaData.iejunta,
      tituloeleitor: empresaData.tituloeleitor,
      area: empresaData.area,
      area2: empresaData.area2,
      obssimples: empresaData.obssimples,
      orgaopedsimples: empresaData.orgaopedsimples,
      pastadocumentos: empresaData.pastadocumentos,
      resprg: empresaData.resprg,
      historico: empresaData.historico,
      altprot: empresaData.altprot,
      capitals: empresaData.capitals,
      capitali: empresaData.capitali,
      cnhnumero: empresaData.cnhnumero,
      cnhexp: empresaData.cnhexp,
      respmae: empresaData.respmae,
      cadimob: empresaData.cadimob,
      endzona: empresaData.endzona,
      endquadra: empresaData.endquadra,
      resprgsigla: empresaData.resprgsigla,
      procuracao: empresaData.procuracao,
      procuracaon: empresaData.procuracaon,
      novarazaosocial1: empresaData.novarazaosocial1,
      novarazaosocial2: empresaData.novarazaosocial2,
      novarazaosocial3: empresaData.novarazaosocial3,
      novarazaosocial: empresaData.novarazaosocial,
      eventos: empresaData.eventos,
      senhagov: empresaData.senhagov,
      resppai: empresaData.resppai,
      nireregistro: empresaData.nireregistro,
      novarazaosocialfinal: empresaData.novarazaosocialfinal,
      ieonline: empresaData.ieonline,
      ietipo: empresaData.ietipo,
      ieeprocnum: empresaData.ieeprocnum,
      sistemaexterno: empresaData.sistemaexterno,
      dadossocios: empresaData.dadossocios,
      quantidadesocios: empresaData.quantidadesocios,
      doccontratos: empresaData.doccontratos,
      razaosocialantiga: empresaData.razaosocialantiga,
      situacaocadastral: empresaData.situacaocadastral,
      divisaocapitalsocios: empresaData.divisaocapitalsocios,
      capitalquotavalor: empresaData.capitalquotavalor,
      capitaquotatotal: empresaData.capitaquotatotal,
      cpfdoconjuge: empresaData.cpfdoconjuge,
      nomedoconjuge: empresaData.nomedoconjuge,
      responsavelorgaorg: empresaData.responsavelorgaorg,
      responsavelestadoorgaorg: empresaData.responsavelestadoorgaorg,
      numeroprocesso: empresaData.numeroprocesso,
      reciboprocesso: empresaData.reciboprocesso,
      sede: empresaData.sede,
      pontodereferencia: empresaData.pontodereferencia,
      tipounidadeprodutiva: empresaData.tipounidadeprodutiva,
      formadeatuacao: empresaData.formadeatuacao,
      dadoscomplestabelecimento: empresaData.dadoscomplestabelecimento,
      dadoscomplatividade: empresaData.dadoscomplatividade,
      dadoscomplpavimentos: empresaData.dadoscomplpavimentos,
      dadoscomplpessoas: empresaData.dadoscomplpessoas,
      dadoscomplsubsolo: empresaData.dadoscomplsubsolo,
      dadoscomplliquido: empresaData.dadoscomplliquido,
      dadoscomplglp: empresaData.dadoscomplglp,
      ajudatipodeunidade: empresaData.ajudatipodeunidade,
      dbeprotocolo: empresaData.dbeprotocolo,
      federalprotocolo: empresaData.federalprotocolo,
      senhasdeacesso: empresaData.senhasdeacesso,
      capitalsocialantigo: empresaData.capitalsocialantigo,
      capitalantigomudou: empresaData.capitalantigomudou,
      cnaeatividadenolocal: empresaData.cnaeatividadenolocal,
      cnaeatvlocalprincipal: empresaData.cnaeatvlocalprincipal,
      cnaeatvlocalsecundarios: empresaData.cnaeatvlocalsecundarios,
      bombeiroatvadm: empresaData.bombeiroatvadm,
      bombeiroatvresidencia: empresaData.bombeiroatvresidencia,
      cnaedescricaooficial: empresaData.cnaedescricaooficial,
      objetodoestabelecimento: empresaData.objetodoestabelecimento,
      simplesecac: empresaData.simplesecac,
      avisarempresa: empresaData.avisarempresa,
      avisarempresatexto: empresaData.avisarempresatexto,
      temenderecoantigoemp: empresaData.temenderecoantigoemp,
      enderecoantigoemp: empresaData.enderecoantigoemp,
      codsistemaexterno: empresaData.codsistemaexterno,
      status_id: empresaData.status_id,
    };

    payload.lembrete = this.selectedEmpresa.lembrete;
    payload.prioridade = this.selectedEmpresa.prioridade;

    if (empresaData.doccontratos) {
      payload.doccontratos_upload = empresaData.doccontratos;
    }

    const request = isNew
      ? this.http.post<Empresa>(this.apiUrl, payload)
      : this.http.patch<Empresa>(`${this.apiUrl}${this.selectedEmpresa.id_empresas}/`, payload);

    request.subscribe({
      next: (data) => {
        this.selectedEmpresa = this.parseEmpresaDates(data);
        if (isNew) {
          this.empresas.push(data);
          this.selectedEmpresaId = data.id_empresas.toString();
          this.router.navigate(['/empresas', data.id_empresas]);
        }
        this.isEditing = false;
        this.showEventosSelector = false;
        this.fileToUpload = null;
        this.fileUrl = null;
        this.loading = false;
        Swal.fire({
          icon: 'success',
          title: 'Sucesso',
          text: 'Empresa salva com sucesso!',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      },
      error: (err) => {
        console.error('Erro ao salvar empresa:', err);
        this.loading = false;
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: err.error?.details ? JSON.stringify(err.error.details) : 'Não foi possível salvar a empresa.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      },
    });
  }

  fetchNaturezasJuridicas(): void {
    this.http.get<NaturezaJuridica[]>('http://127.0.0.1:8000/api/naturezasjuridicas/').subscribe({
      next: (data) => {
        this.naturezasJuridicas = data;
      },
      error: (err) => {
        console.error('Erro ao buscar naturezas jurídicas:', err);
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Não foi possível carregar as naturezas jurídicas.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      },
    });
  }

  loadStatus(): void {
    this.http.get<CADstatus[]>(this.statusApiUrl).subscribe({
      next: (data) => {
        this.statusList = data;
      },
      error: (err) => {
        console.error('Erro ao buscar status:', err);
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Não foi possível carregar os status.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      },
    });
  }

  onEmpresaSelect(): void {
    if (this.isEditing) {
      const alterado = JSON.stringify(this.selectedEmpresa) !== JSON.stringify(this.originalEmpresa);
      if (alterado) {
        Swal.fire({
          title: 'Alterações não salvas!',
          text: 'Você fez alterações. Deseja salvar antes de sair?',
          icon: 'warning',
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: 'Salvar',
          denyButtonText: 'Descartar',
          cancelButtonText: 'Cancelar'
        }).then((result) => {
          if (result.isConfirmed) {
            this.onSalvar();
          } else if (result.isDenied) {
            this.isEditing = false;
            if (this.selectedEmpresaId) {
              this.router.navigate(['/empresas', this.selectedEmpresaId]);
              this.selectedEmpresa = this.empresas.find((e) => e.id_empresas === +this.selectedEmpresaId) || null;
            } else {
              this.router.navigate(['/empresas']);
              this.selectedEmpresa = null;
            }
            this.showEventosSelector = false;
            this.fileToUpload = null;
            this.fileUrl = null;
          }
        });
        return;
      }
    }

    if (this.selectedEmpresaId) {
      this.router.navigate(['/empresas', this.selectedEmpresaId]);
      this.selectedEmpresa = this.empresas.find((e) => e.id_empresas === +this.selectedEmpresaId) || null;
    } else {
      this.router.navigate(['/empresas']);
      this.selectedEmpresa = null;
    }
    this.isEditing = false;
    this.showEventosSelector = false;
    this.fileToUpload = null;
    this.fileUrl = null;
  }

  onEditarCancelar(): void {
    if (this.isEditing) {
      const alterado = JSON.stringify(this.selectedEmpresa) !== JSON.stringify(this.originalEmpresa);
      if (alterado) {
        Swal.fire({
          title: 'Alterações não salvas!',
          text: 'Você fez alterações. Deseja salvar antes de sair?',
          icon: 'warning',
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: 'Salvar',
          denyButtonText: 'Descartar',
          cancelButtonText: 'Cancelar'
        }).then((result) => {
          if (result.isConfirmed) {
            this.onSalvar();
          } else if (result.isDenied) {
            if (this.originalEmpresa && this.selectedEmpresa) {
              Object.assign(this.selectedEmpresa, this.originalEmpresa);
            }
            this.isEditing = false;
            this.showEventosSelector = false;
            this.fileToUpload = null;
            this.fileUrl = null;
          }
        });
        return;
      }
      this.isEditing = false;
      this.showEventosSelector = false;
      this.fileToUpload = null;
      this.fileUrl = null;
    } else {
      if (this.selectedEmpresa) {
        this.originalEmpresa = { ...this.selectedEmpresa };
        this.isEditing = true;
      }
    }
  }

  onNovo(): void {
    this.selectedEmpresa = { 
      id_empresas: 0, 
      razaosocial: '', 
      respcnh: '', 
      respcnhexpedicao: null 
    };
    this.selectedEmpresaId = '';
    this.isEditing = true;
    this.showEventosSelector = false;
    this.fileToUpload = null;
    this.fileUrl = null;
    this.router.navigate(['/empresas']);
  }

  onExcluir(): void {
    if (!this.selectedEmpresa || !this.selectedEmpresa.id_empresas) {
      Swal.fire({
        icon: 'warning',
        title: 'Atenção',
        text: 'Nenhuma empresa selecionada para excluir.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    Swal.fire({
      title: 'Confirmação',
      text: `Deseja excluir a empresa ${this.selectedEmpresa.razaosocial}?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sim, excluir',
      cancelButtonText: 'Cancelar',
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
        cancelButton: 'swal2-cancel-btn',
      },
    }).then((result) => {
      if (result.isConfirmed) {
        this.loading = true;
        this.http
          .delete(`${this.apiUrl}${this.selectedEmpresa!.id_empresas}/`)
          .subscribe({
            next: () => {
              this.empresas = this.empresas.filter(
                (e) => e.id_empresas !== this.selectedEmpresa!.id_empresas
              );
              this.selectedEmpresa = null;
              this.selectedEmpresaId = '';
              this.showEventosSelector = false;
              this.router.navigate(['/empresas']);
              this.loading = false;
              Swal.fire({
                icon: 'success',
                title: 'Sucesso',
                text: 'Empresa excluída com sucesso!',
                buttonsStyling: false,
                customClass: {
                  confirmButton: 'swal2-confirm-btn',
                },
              });
            },
            error: (err) => {
              console.error('Erro ao excluir empresa:', err);
              this.loading = false;
              Swal.fire({
                icon: 'error',
                title: 'Erro',
                text: 'Não foi possível excluir a empresa.',
                buttonsStyling: false,
                customClass: {
                  confirmButton: 'swal2-confirm-btn',
                },
              });
            },
          });
      }
    });
  }

  onFechar(): void {
    if (this.isEditing) {
      const alterado = JSON.stringify(this.selectedEmpresa) !== JSON.stringify(this.originalEmpresa);
      if (alterado) {
        Swal.fire({
          title: 'Alterações não salvas!',
          text: 'Você fez alterações. Deseja salvar antes de sair?',
          icon: 'warning',
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: 'Salvar',
          denyButtonText: 'Descartar',
          cancelButtonText: 'Cancelar'
        }).then((result) => {
          if (result.isConfirmed) {
            this.onSalvar();
          } else if (result.isDenied) {
            this.selectedEmpresa = null;
            this.selectedEmpresaId = '';
            this.isEditing = false;
            this.showEventosSelector = false;
            this.fileToUpload = null;
            this.fileUrl = null;
            this.router.navigate(['/empresas']);
          }
        });
        return;
      }
    }
    this.selectedEmpresa = null;
    this.selectedEmpresaId = '';
    this.isEditing = false;
    this.showEventosSelector = false;
    this.fileToUpload = null;
    this.fileUrl = null;
    this.router.navigate(['/empresas']);
  }

  toggleMenu(): void {
    this.isMenuOpen = !this.isMenuOpen;
  }

  selectSideMenu(index: number): void {
    this.sideMenuIndex = index;
    this.showEventosSelector = false;
  }

  closeLaudo(): void {
    Swal.fire({
      title: 'Fechar?',
      text: 'Deseja voltar para página inicial?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sim',
      cancelButtonText: 'Não',
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
        cancelButton: 'swal2-cancel-btn',
      },
    }).then((result) => {
      if (result.isConfirmed) {
        this.router.navigate(['/home']);
      }
    });
  }

  novaAlteracao(): void {
    if (!this.selectedEmpresa || !this.selectedEmpresa.id_empresas) {
      Swal.fire({
        icon: 'warning',
        title: 'Atenção',
        text: 'Selecione uma empresa para criar uma nova alteração.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    Swal.fire({
      title: 'Nova Alteração',
      text: 'Deseja criar um registro de alteração para esta empresa?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sim',
      cancelButtonText: 'Cancelar',
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
        cancelButton: 'swal2-cancel-btn',
      },
    }).then((result) => {
      if (result.isConfirmed) {
        const novaAlteracao: Partial<Empresa> = {
          razaosocial: this.selectedEmpresa!.razaosocial,
          cnpj: this.selectedEmpresa!.cnpj,
          nalteracao: this.selectedEmpresa!.nalteracao
            ? (parseInt(this.selectedEmpresa!.nalteracao, 10) + 1).toString()
            : '1',
          dataregistroalt: new Date(),
          processo: 'Alteração',
          status: 'Pendente',
        };

        this.http.post<Empresa>(this.apiUrl, novaAlteracao).subscribe({
          next: (data) => {
            this.empresas.push(this.parseEmpresaDates(data));
            this.selectedEmpresa = this.parseEmpresaDates(data);
            this.selectedEmpresaId = data.id_empresas.toString();
            this.isEditing = true;
            this.router.navigate(['/empresas', data.id_empresas]);
            Swal.fire({
              icon: 'success',
              title: 'Sucesso',
              text: 'Nova alteração criada com sucesso!',
              buttonsStyling: false,
              customClass: {
                confirmButton: 'swal2-confirm-btn',
              },
            });
          },
          error: (err) => {
            console.error('Erro ao criar nova alteração:', err);
            Swal.fire({
              icon: 'error',
              title: 'Erro',
              text: 'Não foi possível criar a nova alteração.',
              buttonsStyling: false,
              customClass: {
                confirmButton: 'swal2-confirm-btn',
              },
            });
          },
        });
      }
    });
  }

  exportarEmpresaResumida(): void {
    if (!this.selectedEmpresa) {
      Swal.fire({
        icon: 'warning',
        title: 'Atenção',
        text: 'Nenhuma empresa selecionada para exportar.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    const dadosResumidos = {
      razaosocial: this.selectedEmpresa.razaosocial,
      nomefantasia: this.selectedEmpresa.nomefantasia,
      cnpj: this.selectedEmpresa.cnpj,
      endereco: this.selectedEmpresa.endereco,
      endnumero: this.selectedEmpresa.endnumero,
      endbairro: this.selectedEmpresa.endbairro,
      endcidade: this.selectedEmpresa.endcidade,
      endestado: this.selectedEmpresa.endestado,
      empemail: this.selectedEmpresa.empemail,
      emptel1: this.selectedEmpresa.emptel1,
    };

    const jsonString = JSON.stringify(dadosResumidos, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `empresa_${this.selectedEmpresa.razaosocial}_resumida.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

    Swal.fire({
      icon: 'success',
      title: 'Sucesso',
      text: 'Dados resumidos da empresa exportados com sucesso!',
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
      },
    });
  }

  exportarEmpresaCompleta(): void {
    if (!this.selectedEmpresa) {
      Swal.fire({
        icon: 'warning',
        title: 'Atenção',
        text: 'Nenhuma empresa selecionada para exportar.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    const empresaData = this.formatEmpresaDates({ ...this.selectedEmpresa });
    const jsonString = JSON.stringify(empresaData, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `empresa_${this.selectedEmpresa.razaosocial}_completa.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

    Swal.fire({
      icon: 'success',
      title: 'Sucesso',
      text: 'Dados completos da empresa exportados com sucesso!',
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
      },
    });
  }

  openEventosSelector(): void {
    if (this.isEditing && this.selectedEmpresa) {
      this.showEventosSelector = true;
    } else {
      Swal.fire({
        icon: 'warning',
        title: 'Aviso',
        text: 'Selecione uma empresa e clique em Editar primeiro.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
    }
  }

  closeEventosSelector(): void {
    this.showEventosSelector = false;
  }

  updateEventos(selectedEvents: { event: string; type: string }[]): void {
    if (!this.selectedEmpresa || !selectedEvents.length) {
      Swal.fire({
        icon: 'warning',
        title: 'Aviso',
        text: 'Nenhum evento selecionado.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    const eventsByType: { [key: string]: string[] } = {};
    selectedEvents.forEach(({ event, type }) => {
      const formattedType = type.toUpperCase();
      if (!eventsByType[formattedType]) {
        eventsByType[formattedType] = [];
      }
      eventsByType[formattedType].push(event.toLowerCase());
    });

    let formattedText = this.selectedEmpresa.eventos ? this.selectedEmpresa.eventos + '\n\n' : '';
    for (const [type, events] of Object.entries(eventsByType)) {
      formattedText += `${type}\n`;
      events.forEach((event) => {
        formattedText += `- ${event}\n`;
      });
    }

    this.selectedEmpresa.eventos = formattedText.trim();
    this.showEventosSelector = false;
  }

  copyCnpj(): void {
    if (!this.selectedEmpresa || !this.selectedEmpresa.cnpj) {
      Swal.fire({
        icon: 'error',
        title: 'Erro',
        text: 'Nenhum CNPJ disponível para copiar.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    const cnpjNumeros = this.selectedEmpresa.cnpj.replace(/\D/g, '');
    if (!cnpjNumeros) {
      Swal.fire({
        icon: 'error',
        title: 'Erro',
        text: 'O CNPJ está vazio ou inválido.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    navigator.clipboard
      .writeText(cnpjNumeros)
      .then(() => {
        Swal.fire({
          icon: 'success',
          title: 'Sucesso',
          text: `CNPJ copiado: ${cnpjNumeros}`,
          timer: 2000,
          showConfirmButton: false,
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
      })
      .catch((err) => {
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Falha ao copiar o CNPJ.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
        console.error('Erro ao copiar CNPJ:', err);
      });
  }

  public async copyToClipboard(text: string) {
    if (!text?.trim()) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Nenhum texto para copiar',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    try {
      await navigator.clipboard.writeText(text);
      await Swal.fire({
        position: 'top-end',
        icon: 'success',
        title: 'Copiado!',
        showConfirmButton: false,
        timer: 1500,
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
    } catch (err) {
      const textarea = document.createElement('textarea');
      textarea.value = text;
      document.body.appendChild(textarea);
      textarea.select();
      try {
        document.execCommand('copy');
        await Swal.fire({
          position: 'top-end',
          icon: 'success',
          title: 'Copiado!',
          showConfirmButton: false,
          timer: 1500,
          buttonsStyling: false,
          customClass: {
          confirmButton: 'swal2-confirm-btn',
          },
        });
      } catch (copyErr) {
        await Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Falha ao copiar o texto.',
          buttonsStyling: false,
          customClass: {
            confirmButton: 'swal2-confirm-btn',
          },
        });
        console.error('Erro ao copiar texto:', copyErr);
      }
      document.body.removeChild(textarea);
    }
  }

  public async handlePathAccess(fullPath: string | undefined) {
    if (!fullPath?.trim()) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Nenhum caminho especificado',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    const isWindows = navigator.platform.includes('Win');
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    );

    if (isMobile) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Acesso a arquivos não suportado em dispositivos móveis.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    try {
      if (isWindows) {
        const encodedPath = encodeURIComponent(fullPath);
        window.location.href = `file:///${encodedPath}`;
      } else {
        window.location.href = `file://${fullPath}`;
      }
      await Swal.fire({
        position: 'top-end',
        icon: 'success',
        title: 'Abrindo caminho...',
        showConfirmButton: false,
        timer: 1500,
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
    } catch (err) {
      await Swal.fire({
        icon: 'error',
        title: 'Erro',
        text: 'Falha ao acessar o caminho.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      console.error('Erro ao acessar caminho:', err);
    }
  }

  public async downloadWindowsShortcut(fullPath: string | undefined, name: string) {
    if (!fullPath?.trim()) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Nenhum caminho para criar atalho',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    const shortcutContent = `
[InternetShortcut]
LocalizedResourceName=${name}
URL=file:///${fullPath.replace(/\\/g, '/')}
`;

    const blob = new Blob([shortcutContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${name}.url`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

    await Swal.fire({
      position: 'top-end',
      icon: 'success',
      title: 'Atalho baixado!',
      showConfirmButton: false,
      timer: 1500,
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
      },
    });
  }

  async consultarProtocoloJunta() {
    if (!this.selectedEmpresa?.protocolojuntacomercial) {
      await Swal.fire({ icon: 'info', title: 'Aviso', text: 'Nenhum protocolo informado.', buttonsStyling: false, customClass: { confirmButton: 'swal2-confirm-btn' } });
      return;
    }
    const cidadeNorm = this.normalize(this.selectedEmpresa?.endcidade);
    const estadoNorm = this.normalize(this.selectedEmpresa?.endestado);

    if (!cidadeNorm || !estadoNorm) {
      await Swal.fire({ icon: 'info', title: 'Aviso', text: 'Cidade ou estado não informados na empresa.', buttonsStyling: false, customClass: { confirmButton: 'swal2-confirm-btn' } });
      return;
    }

    const confirm = await Swal.fire({
      title: 'Consultar Protocolo',
      text: `Cidade: ${this.selectedEmpresa?.endcidade || ''} - Estado: ${this.selectedEmpresa?.endestado || ''}. Deseja continuar?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sim',
      cancelButtonText: 'Não',
      buttonsStyling: false,
      customClass: { confirmButton: 'swal2-confirm-btn', cancelButton: 'swal2-cancel-btn' },
    });
    if (!confirm.isConfirmed) return;

    this.http.get<any[]>('http://127.0.0.1:8000/api/sites/').subscribe({
      next: (sites) => {
        const site = sites.find(
          (s) =>
            this.normalize(s?.cidade) === cidadeNorm &&
            this.normalize(s?.estado_sigla) === estadoNorm
        );
        if (site && site.site_junta_unificada) {
          const url = site.site_junta_unificada.endsWith('/')
            ? site.site_junta_unificada
            : site.site_junta_unificada + '/';
          window.open(url + this.selectedEmpresa!.protocolojuntacomercial, '_blank');
        } else {
          Swal.fire({ icon: 'error', title: 'Erro', text: 'Site da Junta Comercial não encontrado para esta cidade/estado.', buttonsStyling: false, customClass: { confirmButton: 'swal2-confirm-btn' } });
        }
      },
      error: (err) => {
        Swal.fire({ icon: 'error', title: 'Erro', text: 'Erro ao buscar sites.', buttonsStyling: false, customClass: { confirmButton: 'swal2-confirm-btn' } });
        console.error('Erro ao buscar sites:', err);
      },
    });
  }

  async consultarFederal() {
    if (!this.selectedEmpresa?.dbeprotocolo) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Nenhum DBE Protocolo informado.',
        buttonsStyling: false,
        customClass: { confirmButton: 'swal2-confirm-btn' },
      });
      return;
    }
    const cidadeNorm = this.normalize(this.selectedEmpresa?.endcidade);
    const estadoNorm = this.normalize(this.selectedEmpresa?.endestado);

    if (!cidadeNorm || !estadoNorm) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Cidade ou estado não informados na empresa.',
        buttonsStyling: false,
        customClass: { confirmButton: 'swal2-confirm-btn' },
      });
      return;
    }
    const confirm = await Swal.fire({
      title: 'Consultar Federal',
      text: `Cidade: ${this.selectedEmpresa?.endcidade || ''} - Estado: ${this.selectedEmpresa?.endestado || ''}. Deseja continuar?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sim',
      cancelButtonText: 'Não',
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
        cancelButton: 'swal2-cancel-btn',
      },
    });
    if (!confirm.isConfirmed) return;

    this.http.get<any[]>('http://127.0.0.1:8000/api/sites/').subscribe({
      next: (sites) => {
        const site = sites.find(
          (s) =>
            this.normalize(s?.cidade) === cidadeNorm &&
            this.normalize(s?.estado_sigla) === estadoNorm
        );
        if (site && site.site_redesim_protocolo) {
          const url = site.site_redesim_protocolo.endsWith('/')
            ? site.site_redesim_protocolo
            : site.site_redesim_protocolo + '/';
          window.open(url + this.selectedEmpresa!.dbeprotocolo, '_blank');
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Erro',
            text: 'Site Federal não encontrado para esta cidade/estado.',
            buttonsStyling: false,
            customClass: { confirmButton: 'swal2-confirm-btn' },
          });
        }
      },
      error: (err) => {
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Erro ao buscar sites.',
          buttonsStyling: false,
          customClass: { confirmButton: 'swal2-confirm-btn' },
        });
        console.error('Erro ao buscar sites:', err);
      },
    });
  }

  async consultarCnpj() {
    if (!this.selectedEmpresa?.cnpj) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Nenhum CNPJ informado.',
        buttonsStyling: false,
        customClass: { confirmButton: 'swal2-confirm-btn' },
      });
      return;
    }
    const cidadeNorm = this.normalize(this.selectedEmpresa?.endcidade);
    const estadoNorm = this.normalize(this.selectedEmpresa?.endestado);

    if (!cidadeNorm || !estadoNorm) {
      await Swal.fire({
        icon: 'info',
        title: 'Aviso',
        text: 'Cidade ou estado não informados na empresa.',
        buttonsStyling: false,
        customClass: { confirmButton: 'swal2-confirm-btn' },
      });
      return;
    }
    const confirm = await Swal.fire({
      title: 'Consultar CNPJ',
      text: `Cidade: ${this.selectedEmpresa?.endcidade || ''} - Estado: ${this.selectedEmpresa?.endestado || ''}. Deseja continuar?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sim',
      cancelButtonText: 'Não',
      buttonsStyling: false,
      customClass: {
        confirmButton: 'swal2-confirm-btn',
        cancelButton: 'swal2-cancel-btn',
      },
    });
    if (!confirm.isConfirmed) return;

    this.http.get<any[]>('http://127.0.0.1:8000/api/sites/').subscribe({
      next: (sites) => {
        const site = sites.find(
          (s) =>
            this.normalize(s?.cidade) === cidadeNorm &&
            this.normalize(s?.estado_sigla) === estadoNorm
        );
        if (site && site.site_redesim_consulta_cnpj) {
          const url = site.site_redesim_consulta_cnpj.endsWith('/')
            ? site.site_redesim_consulta_cnpj
            : site.site_redesim_consulta_cnpj + '/';
          if (this.selectedEmpresa?.cnpj) {
            window.open(url + this.selectedEmpresa.cnpj.replace(/\D/g, ''), '_blank');
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Erro',
              text: 'CNPJ não encontrado.',
              buttonsStyling: false,
              customClass: { confirmButton: 'swal2-confirm-btn' },
            });
          }
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Erro',
            text: 'Site de consulta CNPJ não encontrado para esta cidade/estado.',
            buttonsStyling: false,
            customClass: { confirmButton: 'swal2-confirm-btn' },
          });
        }
      },
      error: (err) => {
        Swal.fire({
          icon: 'error',
          title: 'Erro',
          text: 'Erro ao buscar sites.',
          buttonsStyling: false,
          customClass: { confirmButton: 'swal2-confirm-btn' },
        });
        console.error('Erro ao buscar sites:', err);
      },
    });
  }

  async consultarIE() {
    const cidadeNorm = this.normalize(this.selectedEmpresa?.endcidade);
    const estadoNorm = this.normalize(this.selectedEmpresa?.endestado);

    if (!cidadeNorm || !estadoNorm) {
      await Swal.fire({ icon: 'info', title: 'Aviso', text: 'Cidade ou estado não informados na empresa.', buttonsStyling: false, customClass: { confirmButton: 'swal2-confirm-btn' } });
      return;
    }
    const confirm = await Swal.fire({
      title: 'Consultar IE',
      text: `Cidade: ${this.selectedEmpresa?.endcidade || ''} - Estado: ${this.selectedEmpresa?.endestado || ''}. Deseja continuar?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sim',
      cancelButtonText: 'Não',
      buttonsStyling: false,
      customClass: { confirmButton: 'swal2-confirm-btn', cancelButton: 'swal2-cancel-btn' },
    });
    if (!confirm.isConfirmed) return;

    this.http.get<any[]>('http://127.0.0.1:8000/api/sites/').subscribe({
      next: (sites) => {
        const site = sites.find(
          (s) =>
            this.normalize(s?.cidade) === cidadeNorm &&
            this.normalize(s?.estado_sigla) === estadoNorm
        );
        if (site && site.site_estado) {
          window.open(site.site_estado, '_blank');
        } else {
          Swal.fire({ icon: 'error', title: 'Erro', text: 'Site estadual não encontrado para esta cidade/estado.', buttonsStyling: false, customClass: { confirmButton: 'swal2-confirm-btn' } });
        }
      },
      error: (err) => {
        Swal.fire({ icon: 'error', title: 'Erro', text: 'Erro ao buscar sites.', buttonsStyling: false, customClass: { confirmButton: 'swal2-confirm-btn' } });
        console.error('Erro ao buscar sites:', err);
      },
    });
  }

  abrirModalSocios(tipo: 'responsavel' | 'dadossocios') {
    this.socioModalTipo = tipo;
    this.buscaSocio = '';
    this.showSociosSelector = true;
    this.carregarSocios(); // Carrega sócios do backend
  }

  fecharModalSocios() {
    this.showSociosSelector = false;
  }

  carregarSocios() {
    // Troque pelo seu endpoint real!
    this.http.get<Socio[]>('http://127.0.0.1:8000/api/socios/').subscribe({
      next: (data) => this.socios = data,
      error: () => this.socios = []
    });
  }

  sociosFiltrados(): Socio[] {
    if (!this.buscaSocio) return this.socios;

    // Função para normalizar texto (remove acentos, espaços, deixa minúsculo)
    function normaliza(str: string) {
      return (str || '')
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // remove acentos
        .replace(/\s+/g, '')             // remove espaços
        .replace(/\W/g, '')              // remove outros caracteres especiais
        .toLowerCase();
    }

    // Função para normalizar CPF (só números)
    function normalizaCpf(cpf: string) {
      return (cpf || '').replace(/\D/g, '');
    }

    // Divide a busca em palavras e normaliza cada uma
    const termosBusca = this.buscaSocio
      .split(' ')
      .map(t => normaliza(t))
      .filter(Boolean);

    return this.socios.filter(s => {
      const nome = normaliza(s.nomecompleto);
      const cpf = normalizaCpf(s.cpf);
      const rg = normalizaCpf(s.rg || '');
      return termosBusca.every(termo =>
        nome.includes(termo) || cpf.includes(termo) || rg.includes(termo)
      );
    });
  }

  async onImportarSocioModal(socio: Socio) {
    if (this.socioModalTipo === 'responsavel') {
      if (!this.selectedEmpresa) return;

      // Monta um resumo dos dados que serão importados
      const resumo = `
        <b>Nome:</b> ${socio.nomecompleto || ''}<br>
        <b>CPF:</b> ${socio.cpf || ''}<br>
        <b>RG:</b> ${socio.rg || ''}<br>
        <b>Órgão RG:</b> ${socio.orgaorg || socio.orgao_rg || ''}<br>
        <b>Estado RG:</b> ${socio.estadorg || socio.estado_rg || ''}<br>
        <b>Data de Nascimento:</b> ${socio.data_nascimento || socio.datadenasc || ''}<br>
        <b>CNH:</b> ${socio.cnh || ''}<br>
        <b>Data Expedição CNH:</b> ${socio.cnhdataexp || socio.cnhexpedicao || ''}<br>
        <b>Mãe:</b> ${socio.nomemae || ''}<br>
        <b>Pai:</b> ${socio.nomepai || ''}
      `;

      const confirm = await Swal.fire({
        title: 'Importar Sócio',
        html: `<div style="text-align:left">${resumo}</div>`,
        icon: 'info',
        showCancelButton: true,
        confirmButtonText: 'Importar',
        cancelButtonText: 'Cancelar',
        customClass: {
          confirmButton: 'swal2-confirm-btn',
          cancelButton: 'swal2-cancel-btn',
        }
      });

      if (!confirm.isConfirmed) return;

      this.selectedEmpresa.cpfresponsavel = socio.cpf || '';
      this.selectedEmpresa.nomeresponsavel = socio.nomecompleto || '';
      this.selectedEmpresa.resprg = socio.rg || '';
      this.selectedEmpresa.responsavelorgaorg = socio.orgaorg || socio.orgao_rg || '';
      this.selectedEmpresa.responsavelestadoorgaorg = socio.estadorg || socio.estado_rg || '';

      // Data Nascimento Responsável
      let dataNasc = socio.data_nascimento || socio.datadenasc;
      if (dataNasc && typeof dataNasc === 'string' && dataNasc.includes('/')) {
        const [dia, mes, ano] = dataNasc.split('/');
        this.selectedEmpresa.respdatanasc = new Date(+ano, +mes - 1, +dia);
      } else if (dataNasc && typeof dataNasc === 'string' && dataNasc.includes('-')) {
        // Converte ISO para Date
        const [ano, mes, dia] = dataNasc.split('-');
        this.selectedEmpresa.respdatanasc = new Date(+ano, +mes - 1, +dia);
      } else {
        this.selectedEmpresa.respdatanasc = null;
      }

      // Data Expedição CNH
      let dataCnhExp = socio.cnhdataexp || socio.cnhexpedicao;
      if (dataCnhExp && typeof dataCnhExp === 'string' && dataCnhExp.includes('/')) {
        const [dia, mes, ano] = dataCnhExp.split('/');
        this.selectedEmpresa.cnhdataexp = new Date(+ano, +mes - 1, +dia);
      } else if (dataCnhExp && typeof dataCnhExp === 'string' && dataCnhExp.includes('-')) {
        const [ano, mes, dia] = dataCnhExp.split('-');
        this.selectedEmpresa.cnhdataexp = new Date(+ano, +mes - 1, +dia);
      } else {
        this.selectedEmpresa.cnhdataexp = null;
      }

      this.selectedEmpresa.cnhnumero = socio.cnh || '';
      this.selectedEmpresa.cnhexp = socio.cnhexpedicao || socio.cnhdataexp || '';
      this.selectedEmpresa.respmae = socio.nomemae || '';
      this.selectedEmpresa.resppai = socio.nomepai || '';

      this.fecharModalSocios();
    } else if (this.socioModalTipo === 'dadossocios') {
      this.montarTextoSocio(socio);
      this.fecharModalSocios();
    }
  }

  abrirSelecaoTipoSocio(socioSelecionado: Socio) {
    if (!this.selectedEmpresa) return;
    const tipo = prompt('Escolha o tipo: Entrada, Alteração ou Saída');
    if (!tipo) return;
    const numeroSocio = this.obterProximoNumeroSocio();
    const texto = `${tipo}: Sócio Nº:${numeroSocio} /${socioSelecionado.uf}////////////////////////////////////////////////////
Sócio-Administrador

${socioSelecionado.nomecompleto}, ${socioSelecionado.nacionalidade}, ${socioSelecionado.estado_civil}, nascido em ${socioSelecionado.data_nascimento}, ${socioSelecionado.profissao}, residente e domiciliado na ${socioSelecionado.rua}, portador da Cédula da Identidade Civil RG n.º ${socioSelecionado.rg}-${socioSelecionado.orgao_rg}/${socioSelecionado.uf} e do CPF n.º ${socioSelecionado.cpf}.
//////////////////////////////////////////////////////////////////////`;

    if (!this.selectedEmpresa.dadossocios) this.selectedEmpresa.dadossocios = '';
    this.selectedEmpresa.dadossocios += '\n' + texto;
  }

  obterProximoNumeroSocio(): number {
    if (!this.selectedEmpresa || !this.selectedEmpresa.dadossocios) return 1;
    const regex = /Sócio Nº:(\d+)/g;
    const usados = new Set<number>();
    let match;
    while ((match = regex.exec(this.selectedEmpresa.dadossocios)) !== null) {
      usados.add(Number(match[1]));
    }
    // Procura o menor número não usado
    let n = 1;
    while (usados.has(n)) n++;
    return n;
  }

  onNovoSocio() {
    this.router.navigate(['/socios/novo']);
  }

  onEditarSocio(socio: Socio) {
    this.router.navigate(['/socios', socio.id_socios]);
  }

  async montarTextoSocio(socio: Socio) {
    if (!this.selectedEmpresa) return;

    // Declare todas as variáveis no início
    let menoridadeSelecionada = '';
    let sugestao = '';
    let explicacao = '';
    let texto = '';
    let alertaMenoridade = '';
    let representante = '';
    let assistente = '';
    let emancipacao = '';
    let nacionalidade = socio.nacionalidade || 'brasileiro';
    let estadoCivil = socio.civil || socio.estado_civil || '';
    let profissao = socio.profissao || '';
    let uf = socio.estadorg || socio.estado_rg || socio.uf || '';
    let logradouro = this.formatarLogradouro(socio.rua);
    let endereco = [
      logradouro,
      socio.num ? `n.º ${socio.num}` : '',
      socio.complemento ? `, ${socio.complemento}` : '',
      socio.bairro ? `, ${socio.bairro}` : '',
      socio.cep ? `, CEP: ${socio.cep}` : '',
      socio.cidade ? `, na cidade de ${socio.cidade}` : '',
      socio.estado ? `-${socio.estado}` : ''
    ].filter(Boolean).join('');
    let rgCompleto = [
      socio.rg || '',
      socio.orgaorg || socio.orgao_rg ? `-${socio.orgaorg || socio.orgao_rg}` : '',
      socio.estadorg || socio.estado_rg ? `/${socio.estadorg || socio.estado_rg}` : ''
    ].filter(Boolean).join('');

    // Data nascimento por extenso e cálculo de idade
    let nascimentoStr = socio.data_nascimento || socio.datadenasc || '';
    if (nascimentoStr && nascimentoStr.includes('-')) {
      const [ano, mes, dia] = nascimentoStr.split('-');
      nascimentoStr = `${dia}/${mes}/${ano}`;
    }
    const nascimento = nascimentoStr ? this.dataPorExtenso(nascimentoStr) : '';

    let idade = 0;
    if (nascimentoStr && nascimentoStr.includes('/')) {
      const [dia, mes, ano] = nascimentoStr.split('/');
      const nascDate = new Date(+ano, +mes - 1, +dia);
      const hoje = new Date();
      idade = hoje.getFullYear() - nascDate.getFullYear();
      const m = hoje.getMonth() - nascDate.getMonth();
      if (m < 0 || (m === 0 && hoje.getDate() < nascDate.getDate())) {
        idade--;
      }
    }

    if (idade > 0 && idade < 18) {
      // Define sugestão automática conforme idade
      if (idade < 16) {
        sugestao = 'menor impúbere';
        explicacao = `
          <b>Menor Impúbere (menos de 16 anos):</b> <br>
          Necessita de <b>representação</b> (pais ou tutor assinam por ele).<br>
          <small>Exemplo: Representado por seu pai/mãe/tutor...</small>
          <hr>
        `;
      } else if (idade < 18) {
        sugestao = 'menor púbere';
        explicacao = `
          <b>Menor Púbere (16 a 18 anos não emancipado):</b> <br>
          Necessita de <b>assistência</b> (assina junto com responsável).<br>
          <small>Exemplo: Assistido por seu pai/mãe/tutor...</small>
          <hr>
        `;
      }

      explicacao += `
        <b>Menor Emancipado:</b> <br>
        Pode assinar sozinho, como maior de idade.<br>
        <small>Exemplo: menor emancipado, conforme registro...</small>
        <hr>
        <span style="color:#b45309"><b>Dica:</b> O contrato social deve indicar claramente a condição do menor.</span>
      `;

      const { value: menoridade } = await Swal.fire({
        title: 'Sócio menor de idade!',
        html: `
          <div style="text-align:left">
            Selecione o tipo de menoridade:<br>
            <select id="swal-menoridade" class="swal2-input">
              <option value="menor impúbere">Menor impúbere (menos de 16 anos)</option>
              <option value="menor púbere">Menor púbere (16 a 18 anos)</option>
              <option value="menor emancipado">Menor emancipado</option>
            </select>
            <div style="margin-top:10px;font-size:13px">${explicacao}</div>
          </div>
        `,
        icon: 'warning',
        focusConfirm: false,
        didOpen: () => {
          // Seleciona automaticamente a opção sugerida
          const select = document.getElementById('swal-menoridade') as HTMLSelectElement;
          if (select && sugestao) select.value = sugestao;
        },
        preConfirm: () => {
          return (document.getElementById('swal-menoridade') as HTMLSelectElement).value;
        }
      });
      menoridadeSelecionada = menoridade || sugestao;
    }

    const { value: formValues } = await Swal.fire({
      title: 'Dados do Sócio',
      html:
        `<label>Tipo de operação:</label>
        <select id="swal-tipo" class="swal2-input">
          <option value="Entrada">Entrada</option>
          <option value="Alteração">Alteração</option>
          <option value="Saída">Saída</option>
        </select>
        <label>Função do Sócio:</label>
        <select id="swal-funcao" class="swal2-input">
          <option value="Sócio">Sócio</option>
          <option value="Sócio-Administrador">Sócio-Administrador</option>
          <option value="Presidente">Presidente</option>
          <option value="Advogado">Advogado</option>
        </select>`,
      focusConfirm: false,
      preConfirm: () => {
        const tipo = (document.getElementById('swal-tipo') as HTMLSelectElement).value;
        const funcao = (document.getElementById('swal-funcao') as HTMLSelectElement).value;
        return { tipo, funcao };
      }
    });

    if (!formValues) return;
    const tipo = formValues.tipo;
    const funcao = formValues.funcao;
    const numeroSocio = this.obterProximoNumeroSocio();

    if (menoridadeSelecionada === 'menor impúbere') {
      // Solicita nome do representante
      representante = (await Swal.fire({
        title: 'Representante Legal',
        input: 'text',
        inputLabel: 'Nome do representante legal (pai/mãe/tutor):',
        inputPlaceholder: 'Ex: JOSÉ NEVES',
        showCancelButton: true,
        confirmButtonText: 'Confirmar',
        cancelButtonText: 'Cancelar'
      })).value || '[NOME DO REPRESENTANTE]';

      texto =
`Representado por seu pai/mãe/tutor: ${representante}, na qualidade de representante legal de seu filho menor impúbere:

${socio.nomecompleto}, ${nacionalidade}, menor impúbere, nascido em ${nascimento}, residente e domiciliado na ${endereco}.`;
      alertaMenoridade = `⚠️ ATENÇÃO: SÓCIO MENOR IMPÚBERE (menor de 16 anos, incapaz absoluto)\n\n`;
    } else if (menoridadeSelecionada === 'menor púbere') {
      // Solicita nome do assistente
      assistente = (await Swal.fire({
        title: 'Assistente Legal',
        input: 'text',
        inputLabel: 'Nome do assistente legal (pai/mãe/tutor):',
        inputPlaceholder: 'Ex: JOSÉ NEVES',
        showCancelButton: true,
        confirmButtonText: 'Confirmar',
        cancelButtonText: 'Cancelar'
      })).value || '[NOME DO ASSISTENTE]';

      texto =
`Assistido por seu pai/mãe/tutor: ${assistente}, na qualidade de assistente legal de seu filho menor púbere:

${socio.nomecompleto}, ${nacionalidade}, menor púbere, nascido em ${nascimento}, residente e domiciliado na ${endereco}, portador do RG n.º ${rgCompleto} e do CPF n.º ${socio.cpf}.`;
      alertaMenoridade = `⚠️ ATENÇÃO: SÓCIO MENOR PÚBERE (16 a 18 anos, incapaz relativo)\n\n`;
    } else if (menoridadeSelecionada === 'menor emancipado') {
      // Solicita dados da emancipação
      emancipacao = (await Swal.fire({
        title: 'Dados da Emancipação',
        input: 'text',
        inputLabel: 'Descreva o registro da emancipação:',
        inputPlaceholder: 'Ex: conforme registro lavrado em [data], no Livro XX, Folha XX, do Cartório de Registro Civil...',
        showCancelButton: true,
        confirmButtonText: 'Confirmar',
        cancelButtonText: 'Cancelar'
      })).value || '[DADOS DA EMANCIPAÇÃO]';

      texto =
`${socio.nomecompleto}, ${nacionalidade}, solteiro, menor emancipado, nascido em ${nascimento}, residente e domiciliado na ${endereco}, portador da Cédula de Identidade Civil RG n.º ${rgCompleto} e do CPF n.º ${socio.cpf}, emancipado ${emancipacao}.`;
      alertaMenoridade = `⚠️ ATENÇÃO: SÓCIO MENOR EMANCIPADO (plena capacidade civil)\n\n`;
    } else {
      // Maior de idade (padrão)
      texto =
`${socio.nomecompleto}, ${nacionalidade}, ${estadoCivil}, nascido em ${nascimento}${profissao ? ', ' + profissao : ''}, residente e domiciliado na ${endereco}, portador da Cédula da Identidade Civil RG n.º ${rgCompleto} e do CPF n.º ${socio.cpf}.`;
    }

    // Verifica se já existe um sócio com o mesmo CPF ou texto igual
    const dadosSocios = this.selectedEmpresa.dadossocios || '';
    const jaExiste = dadosSocios.includes(`CPF n.º ${socio.cpf}`) || dadosSocios.includes(texto);

    if (jaExiste) {
      await Swal.fire({
        icon: 'warning',
        title: 'Sócio já adicionado!',
        text: 'Este sócio já está presente em dadossocios.',
        buttonsStyling: false,
        customClass: {
          confirmButton: 'swal2-confirm-btn',
        },
      });
      return;
    }

    if (!this.selectedEmpresa.dadossocios) this.selectedEmpresa.dadossocios = '';
    this.selectedEmpresa.dadossocios +=
      `\n//////////////////////////////////////////////////////////////////////\n` +
      `${tipo}: Sócio Nº:${numeroSocio} /${uf}////////////////////////////////////////////////////\n` +
      `${funcao}\n\n${alertaMenoridade}${texto}\n//////////////////////////////////////////////////////////////////////`;

    // Atualiza quantidade de sócios
    const regex = /Sócio Nº:(\d+)/g;
    const matches = [...this.selectedEmpresa.dadossocios.matchAll(regex)];
    this.selectedEmpresa.quantidadesocios = matches.length.toString();
  }

  get sociosSeparados(): string[] {
    if (!this.selectedEmpresa?.dadossocios) return [];
    // Divide pelos separadores, remove vazios e espaços extras
    return this.selectedEmpresa.dadossocios
      .split(/\/{10,}/g)
      .map(s => s.trim())
      .filter(s => s.length > 0);
  }

  extrairTextoPrincipalSocio(socioTexto: string): string {
    // Remove linhas de separador e função, pega só o texto principal
    // Exemplo: pula linhas até encontrar uma linha em branco, depois pega o bloco até o próximo separador
    const linhas = socioTexto.split('\n').map(l => l.trim());
    // Procura a primeira linha em branco (após função)
    let start = 0;
    while (start < linhas.length && linhas[start] !== '') start++;
    // Pega todas as linhas após a linha em branco, até o final
    const principal = linhas.slice(start + 1).join(' ').replace(/\s+/g, ' ').trim();
    return principal;
  }

  copyTextoPrincipalSocio(socioTexto: string) {
    // Extrai só o texto principal (após a primeira linha em branco)
    const linhas = socioTexto.split('\n');
    let start = 0;
    while (start < linhas.length && linhas[start].trim() !== '') start++;
    const principal = linhas.slice(start + 1).join(' ').replace(/\s+/g, ' ').trim();

    navigator.clipboard.writeText(principal).then(() => {
      Swal.fire({
        position: 'center',
        icon: 'success',
        title: 'Mensagem copiada!',
        showConfirmButton: false,
        timer: 1200,
        customClass: {
          popup: 'swal2-copied-center'
        }
      });
    });
  }

  isMenorDeIdade(texto: string): boolean {
    // Procura por "nascido em DD de mês de AAAA" no texto
    const regex = /nascido em (\d{2}) de ([a-zç]+) de (\d{4})/i;
    const match = texto.match(regex);
    if (!match) return false;

    const [_, dia, mesStr, ano] = match;
    const meses = [
      '', 'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho',
      'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'
    ];
    const mes = meses.findIndex(m => m.toLowerCase() === mesStr.toLowerCase());
    if (mes === -1) return false;

    const dataNasc = new Date(+ano, mes - 1, +dia);
    const hoje = new Date();
    let idade = hoje.getFullYear() - dataNasc.getFullYear();
    const m = hoje.getMonth() - dataNasc.getMonth();
    if (m < 0 || (m === 0 && hoje.getDate() < dataNasc.getDate())) {
      idade--;
    }
    return idade < 18;
  }
}


scss = $primary-dark: #1e3a8a;
$primary-light: #3b82f6;
$background: #f3f4f6;
$white: #ffffff;
$shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
$border-radius: 8px;
$gray-light: #e5e7eb;
$gray-medium: #d1d5db;

.empresas-container {
  display: flex;
  height: 100vh;
  background: $background;
  font-family: 'Roboto', sans-serif;
  position: relative;
}

.sidebar-toggle {
  width: 50px;
  background: $primary-dark;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 2002; // acima do overlay, abaixo do menu lateral

  .hamburger {
    background: transparent;
    border: none;
    width: 40px;
    height: 40px;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transition: transform 0.3s;

    span {
      width: 20px;
      height: 2px;
      background: $white;
      margin: 2px 0;
      transition: all 0.3s;
    }

    &:hover {
      transform: scale(1.1);
    }
  }

  .vertical-text {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 20px;

    span {
      color: $white;
      font-size: 16px;
      font-weight: 500;
      line-height: 1.2;
    }
  }
}

.sidenav {
  width: 250px;
  background: $white;
  box-shadow: $shadow;
  position: fixed;
  top: 0;
  left: -250px;
  height: 100vh;
  transition: left 0.3s ease;
  z-index: 2003; // acima da barra azul

  &.open {
    left: 50px; // aparece ao lado da barra azul
  }

  nav {
    margin-top: 20px;
    ul {
      list-style: none;
      padding: 0;
      li {
        padding: 15px 20px;
        cursor: pointer;
        transition: background 0.3s;
        color: $primary-dark;
        display: flex;
        align-items: center;
        span {
          margin-right: 10px;
        }
        &:hover {
          background: $primary-light;
          color: $white;
        }
        &.active {
          background: $primary-dark;
          color: $white;
        }
      }
    }
  }
}

.sidenav-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(30, 58, 138, 0.3);
  z-index: 2001; // abaixo da barra azul e do menu lateral
}
.sidenav-overlay.open {
  display: block;
}

.back-button {
  position: fixed;
  top: 10px;
  right: 15px;
  background: $primary-dark;
  color: $white;
  border: none;
  padding: 10px 20px;
  border-radius: $border-radius;
  cursor: pointer;
  transition: background 0.3s;
  z-index: 999;

  &:hover {
    background: $primary-light;
  }
}

.content {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  margin-left: 50px; // só espaço para a barra azul
  margin-right: 250px;
  transition: margin-left 0.3s ease;

  &.menu-open {
    margin-left: 50px; // não muda ao abrir o menu!
  }

  h1 {
    font-size: 24px;
    margin-bottom: 20px;
    color: $primary-dark;
  }

  .empresa-selector {
    margin-bottom: 20px;

    label {
      font-weight: 500;
      margin-right: 10px;
      color: $primary-dark;
    }

    select {
      padding: 10px;
      border: 1px solid $gray-medium;
      border-radius: $border-radius;
      font-size: 14px;
      width: 100%;
      max-width: 300px;
      transition: border-color 0.3s;

      &:focus {
        border-color: $primary-light;
        outline: none;
      }

      &[value=""] {
        border-color: #f59e0b;
        background-color: #fffbeb;
      }

      option[value=""] {
        color: #6b7280;
        font-style: italic;
      }
    }
  }

  .form-container {
    background: $white;
    padding: 24px;
    border-radius: $border-radius;
    box-shadow: $shadow;

    .form-section {
      display: flex;
      flex-direction: column;
      gap: 10px;

      .side-by-side {
        display: flex;
        gap: 30px; // aumente aqui para mais espaço, por exemplo:
        width: 100%;
        margin-bottom: 15px;

        .form-group {
          flex: 1;
          min-width: 0;

          label {
            font-weight: 500;
            margin-bottom: 5px;
            color: $primary-dark;
          }

          input {
            padding: 10px;
            border: 1px solid $gray-medium;
            border-radius: $border-radius;
            font-size: 14px;
            transition: border-color 0.3s;
            width: 100%;

            &:focus {
              border-color: $primary-light;
              outline: none;
            }

            &[disabled] {
              background: $gray-light;
              cursor: not-allowed;
            }
          }
        }
      }

      .form-group {
        display: flex;
        flex-direction: column;
        width: 100%;
        margin-bottom: 15px;

        &.junta-obs {
          margin-top: 20px;
          margin-bottom: 20px;
        }

        label {
          font-weight: 500;
          margin-bottom: 5px;
          color: $primary-dark;
        }

        input,
        select {
          padding: 10px;
          border: 1px solid $gray-medium;
          border-radius: $border-radius;
          font-size: 14px;
          transition: border-color 0.3s;

          &:focus {
            border-color: $primary-light;
            outline: none;
          }

          &[disabled] {
            background: $gray-light;
            cursor: not-allowed;
          }
        }

        .textarea-custom {
          padding: 10px;
          border: 1px solid $gray-medium;
          border-radius: $border-radius;
          font-size: 14px;
          min-height: 100px;
          resize: vertical;
          transition: border-color 0.3s;
          width: 100%;

          &:focus {
            border-color: $primary-light;
            outline: none;
          }

          &[disabled] {
            background: $gray-light;
            cursor: not-allowed;
          }
        }

        .textarea-large {
          @extend .textarea-custom;
          min-height: 150px;
          max-height: 300px;
          font-size: 15px;
        }

        .copy-button {
          margin-top: 5px;
          background: $primary-dark;
          color: $white;
          border: none;
          padding: 5px 10px;
          border-radius: 4px;
          font-size: 12px;
          cursor: pointer;
          transition: background 0.3s;

          &:hover {
            background: $primary-light;
          }
        }
      }
    }
  }
}

.right-menu {
  width: 200px;
  background: $white;
  box-shadow: $shadow;
  padding: 20px;
  position: fixed;
  right: 15px;
  top: 60px;
  height: calc(100vh - 80px);
  display: flex;
  flex-direction: column;
  gap: 10px;
  z-index: 998;

  button {
    background: $primary-dark;
    color: $white;
    border: none;
    padding: 10px;
    border-radius: $border-radius;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: $primary-light;
    }

    &.btn-salvar {
      background: #10b981;

      &:hover {
        background: #059669;
      }
    }

    &.btn-excluir {
      background: #ef4444;

      &:hover {
        background: #dc2626;
      }
    }

    &.btn-novo,
    &.btn-fechar,
    &.btn-editar {
      background: $primary-dark;

      &:hover {
        background: $primary-light;
      }
    }
  }

  .shortcuts {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;

    button {
      background: $gray-light;
      color: $primary-dark;
      font-size: 12px;

      &:hover {
        background: $primary-light;
        color: $white;
      }
    }
  }
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  font-size: 20px;
  color: $primary-dark;
}

.empresa-facil-container {
  width: 100%;
}

.empresa-facil-content {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  align-items: flex-start;
  padding: 15px;
}

.key-dates {
  flex: 1;
  min-width: 250px;
  display: flex;
  flex-direction: column;
  gap: 15px;

  .date-box {
    background: $white;
    border: 1px solid $gray-medium;
    border-radius: $border-radius;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

    label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: $primary-dark;
    }

    input {
      width: 100%;
      padding: 8px;
      border: 1px solid $gray-light;
      border-radius: 4px;
      font-size: 14px;
      transition: border-color 0.3s;

      &:focus {
        border-color: $primary-light;
        outline: none;
      }

      &[disabled] {
        background: $gray-light;
        cursor: not-allowed;
      }
    }
  }
}

.tabs-container {
  flex: 2;
  min-width: 300px;

  mat-tab-group {
    .mat-tab-body-content {
      padding: 20px;
    }

    .form-group {
      margin-bottom: 15px;

      label {
        font-weight: 500;
        color: $primary-dark;
      }

      input,
      textarea.textarea-custom,
      textarea.textarea-large {
        width: 100%;
        padding: 8px;
        border: 1px solid $gray-light;
        border-radius: 4px;
        font-size: 14px;

        &[disabled] {
          background: $gray-light;
          cursor: not-allowed;
        }
      }

      textarea.textarea-custom {
        min-height: 100px;
        resize: vertical;
      }

      textarea.textarea-large {
        min-height: 150px;
        max-height: 300px;
        font-size: 15px;
      }
    }
  }
}

.date-field-group {
  background: $white;
  padding: 10px;
  border-radius: $border-radius;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  transition: box-shadow 0.3s;
  margin-bottom: 15px;

  &:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  label {
    font-weight: 500;
    color: $primary-dark;
    margin-bottom: 5px;
    display: block;
  }

  mat-form-field {
    width: 100%;
  }
}

.swal2-container {
  background: rgba(255,255,255,0.7) !important;
}

.swal2-copied-center {
  top: 50% !important;
  left: 50% !important;
  transform: translate(-50%, -50%) !important;
}

.button-group {
  display: flex;
  gap: 8px; // ajuste o valor conforme desejar
  margin-top: 5px;
}

.modal-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.4);
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background: #fff;
  padding: 2em 1.5em 1em 1.5em;
  border-radius: 10px;
  min-width: 350px;
  max-width: 95vw;
  box-shadow: 0 8px 32px rgba(0,0,0,0.18);
  position: relative;
}

.input-busca {
  width: 100%;
  padding: 0.5em 1em;
  margin-bottom: 1em;
  border-radius: 5px;
  border: 1px solid #bbb;
  font-size: 1em;
}

.lista-socios {
  max-height: 250px;
  overflow-y: auto;
  padding: 0;
  margin: 0 0 1em 0;
  list-style: none;
}

.lista-socios li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.4em 0;
  border-bottom: 1px solid #f0f0f0;
  gap: 0.5em;
}

.lista-socios li:last-child {
  border-bottom: none;
}

.lista-socios span {
  flex: 1;
  font-size: 1em;
  color: #222;
  word-break: break-all;
}

.lista-socios button {
  margin-left: 0.3em;
  padding: 0.2em 0.7em;
  font-size: 0.95em;
  border-radius: 4px;
  border: none;
  background: #1976d2;
  color: #fff;
  cursor: pointer;
  transition: background 0.2s;
}

.lista-socios button:hover {
  background: #125ea2;
}

.modal-content > button {
  margin-right: 0.5em;
  margin-top: 0.5em;
  background: #eee;
  color: #222;
  border: 1px solid #bbb;
}

.modal-content > button:hover {
  background: #ddd;
}

.socios-lista {
  max-height: 350px;
  overflow-y: auto;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  background: #f9f9f9;
  padding: 8px;
}

.socio-bloco {
  margin-bottom: 16px;
  padding: 8px;
  background: #fff;
  border-radius: 6px;
  box-shadow: 0 1px 2px rgba(0,0,0,0.04);
  font-family: 'Fira Mono', monospace;
  white-space: pre-wrap;
}

.socio-bloco pre {
  white-space: pre-wrap;
  word-break: word-break;
  overflow-x: auto;
  max-width: 100%;
}

.menor-alerta {
  color: #b91c1c;
  font-weight: bold;
  margin-right: 8px;
}

.menor-explicacao {
  background: #fffbe6;
  border-left: 4px solid #f59e42;
  padding: 8px 12px;
  margin: 8px 0 12px 0;
  font-size: 13px;
  border-radius: 4px;
}

.menor-explicacao ul {
  margin: 0 0 4px 0;
  padding-left: 18px;
}

.menor-explicacao li {
  margin-bottom: 4px;
}

.menor-dica {
  color: #b45309;
  font-size: 12px;
}

@media (max-width: 768px) {
  .sidebar-toggle {
    width: 40px;
  }

  .sidenav {
    width: 200px;
    left: -200px;

    &.open {
      left: 40px;
    }
  }

  .content {
    margin-left: 40px;
    padding: 10px;
    margin-right: 0;

    &.menu-open {
      margin-left: 240px;
    }

    .form-container .form-section {
      .side-by-side {
        flex-direction: column;
        gap: 8px;
      }

      .form-group {
        &.junta-obs {
          margin-top: 15px;
        }

        textarea.textarea-large,
        textarea.textarea-custom {
          width: 100% !important;
          max-width: 100% !important;
        }
      }
    }
  }

  .back-button {
    right: 10px;
    top: 10px;
    padding: 8px 16px;
  }

  .right-menu {
    display: none;
  }

  .empresa-facil-content {
    flex-direction: column;
    padding: 10px;

    .key-dates,
    .tabs-container {
      width: 100%;
      min-width: unset;
    }

    .tabs-container {
      .form-group {
        &.junta-obs {
          margin-top: 15px;
        }

        textarea.textarea-large,
        textarea.textarea-custom {
          width: 100% !important;
          max-width: 100% !important;
        }
      }
    }
  }

  .date-field-group {
    padding: 8px;
  }
}

@media (max-width: 480px) {
  .sidenav {
    width: 150px;
    left: -150px;

    &.open {
      left: 40px;
    }
  }

  .content {
    &.menu-open {
      margin-left: 190px;
    }
  }

  .empresa-selector {
    select {
      max-width: 100%;
    }
  }
}





html = <div class="empresas-container" *ngIf="!loading; else loadingTemplate">
  <!-- Barra azul lateral sempre visível com texto MENU -->
  <div class="sidebar-toggle" (click)="toggleMenu()">
    <button class="hamburger">
      <span></span>
      <span></span>
      <span></span>
    </button>
    <div class="vertical-text">
      <span>M</span>
      <span>E</span>
      <span>N</span>
      <span>U</span>
    </div>
  </div>

  <!-- Overlay escuro para fechar o menu ao clicar fora -->
  <div class="sidenav-overlay" [class.open]="isMenuOpen" (click)="toggleMenu()"></div>
  <!-- Menu lateral branco sobrepondo o conteúdo -->
  <div class="sidenav" [class.open]="isMenuOpen">
    <nav>
      <ul>
        <li [class.active]="sideMenuIndex === 0" (click)="selectSideMenu(0)"><span>←</span> Empresa</li>
        <li [class.active]="sideMenuIndex === 1" (click)="selectSideMenu(1)"><span>←</span> Geral</li>
        <li [class.active]="sideMenuIndex === 2" (click)="selectSideMenu(2)"><span>←</span> Dados Cadastrais</li>
        <li [class.active]="sideMenuIndex === 3" (click)="selectSideMenu(3)"><span>←</span> Empresa Fácil</li>
        <li [class.active]="sideMenuIndex === 4" (click)="selectSideMenu(4)"><span>←</span> Receita Federal</li>
        <li [class.active]="sideMenuIndex === 5" (click)="selectSideMenu(5)"><span>←</span> Receita Estadual</li>
        <li [class.active]="sideMenuIndex === 6" (click)="selectSideMenu(6)"><span>←</span> Simples Nacional</li>
        <li [class.active]="sideMenuIndex === 7" (click)="selectSideMenu(7)"><span>←</span> Prefeitura</li>
        <li [class.active]="sideMenuIndex === 8" (click)="selectSideMenu(8)"><span>←</span> Senhas</li>
        <li [class.active]="sideMenuIndex === 9" (click)="selectSideMenu(9)"><span>←</span> Procurações</li>
        <li [class.active]="sideMenuIndex === 10" (click)="selectSideMenu(10)"><span>←</span> Avisos</li>
        <li [class.active]="sideMenuIndex === 11" (click)="selectSideMenu(11)"><span>←</span> Histórico</li>
      </ul>
    </nav>
  </div>

  <!-- Botão Voltar -->
  <button class="back-button" (click)="closeLaudo()">Voltar</button>

  <!-- Conteúdo Principal -->
  <div class="content" [class.menu-open]="isMenuOpen">
    <h1>Empresas</h1>
    <div class="empresa-selector">
      <label for="empresa">Selecione uma empresa:</label>
      <select id="empresa" [(ngModel)]="selectedEmpresaId" (change)="onEmpresaSelect()">
        <option value="">-- Escolha uma empresa --</option>
        <option *ngFor="let empresa of empresas" [value]="empresa.id_empresas">
          {{ empresa.razaosocial }}
        </option>
      </select>
    </div>

    <div *ngIf="selectedEmpresa" class="form-container">
      <ng-container [ngSwitch]="sideMenuIndex">
        <!-- Empresa -->
        <div *ngSwitchCase="0" class="form-section">
          <div class="form-group">
            <label>Razão Social</label>
            <input [(ngModel)]="selectedEmpresa.razaosocial" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Nome Fantasia</label>
            <input [(ngModel)]="selectedEmpresa.nomefantasia" [disabled]="!isEditing" />
          </div>
          <div class="side-by-side">
            <div class="form-group">
              <label>CNPJ</label>
              <input [(ngModel)]="selectedEmpresa.cnpj" [disabled]="!isEditing" #cnpjInput />
              <div class="button-group">
                <button mat-button (click)="copyCnpj()">Copiar</button>
                <button mat-button color="primary" (click)="consultarCnpj()">Consultar</button>
              </div>
            </div>
            <div class="form-group">
              <label>Inscrição Estadual (IE)</label>
              <input [(ngModel)]="selectedEmpresa.ie" [disabled]="!isEditing" #ieInput />
              <div class="button-group">
                <button mat-button (click)="copyToClipboard(ieInput.value)">Copiar</button>
                <button mat-button color="primary" (click)="consultarIE()">Consultar</button>
              </div>
            </div>
          </div>
          <div class="form-group">
            <label>Inscrição Municipal (IM)</label>
            <input [(ngModel)]="selectedEmpresa.im" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Natureza Jurídica</label>
            <select [(ngModel)]="selectedEmpresa.naturezajuridica" [disabled]="!isEditing">
              <option value="">Selecione</option>
              <option *ngFor="let nj of naturezasJuridicas" [value]="nj.Descricao">{{ nj.Descricao }}</option>
            </select>
          </div>
          <div class="date-field-group">
            <label>Data Início Atividade</label>
            <mat-form-field appearance="fill">
              <input
                matInput
                [matDatepicker]="empInicioPicker"
                [(ngModel)]="selectedEmpresa.empinicioatividade"
                [disabled]="!isEditing"
                placeholder="DD/MM/YYYY"
              />
              <mat-datepicker-toggle matSuffix [for]="empInicioPicker"></mat-datepicker-toggle>
              <mat-datepicker #empInicioPicker></mat-datepicker>
            </mat-form-field>
          </div>
          <div class="date-field-group">
            <label>Data Criação</label>
            <mat-form-field appearance="fill">
              <input
                matInput
                [matDatepicker]="empCriadoPicker"
                [(ngModel)]="selectedEmpresa.empcriado"
                [disabled]="!isEditing"
                placeholder="DD/MM/YYYY"
              />
              <mat-datepicker-toggle matSuffix [for]="empCriadoPicker"></mat-datepicker-toggle>
              <mat-datepicker #empCriadoPicker></mat-datepicker>
            </mat-form-field>
          </div>
          <div class="form-group">
            <label>Regime Federal</label>
            <input [(ngModel)]="selectedEmpresa.regimefederal" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Porte da Empresa</label>
            <input [(ngModel)]="selectedEmpresa.portedaempresa" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Tipo de Empresa</label>
            <input [(ngModel)]="selectedEmpresa.tipodeempresa" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Situação Cadastral</label>
            <input [(ngModel)]="selectedEmpresa.situacaocadastral" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Código Sistema Externo</label>
            <input [(ngModel)]="selectedEmpresa.codsistemaexterno" [disabled]="!isEditing" />
          </div>
        </div>

        <!-- Geral -->
        <div *ngSwitchCase="1" class="form-section">
          <h1>Avisos e Lembretes</h1>
          <div class="date-field-group">
            <label>Avisar na Página Inicial Dia</label>
            <mat-form-field appearance="fill">
              <input
                matInput
                [matDatepicker]="avisarPicker"
                [(ngModel)]="selectedEmpresa.avisardia"
                [disabled]="!isEditing"
                placeholder="DD/MM/YYYY"
              />
              <mat-datepicker-toggle matSuffix [for]="avisarPicker"></mat-datepicker-toggle>
              <mat-datepicker #avisarPicker></mat-datepicker>
            </mat-form-field>
            <span>{{ formatBR(selectedEmpresa.avisardia || null) }}</span>
          </div>
          <div class="form-group">
            <h1>Informações Gerais Empresas</h1>
            <label>Processo de:</label>
            <mat-form-field appearance="fill">
              <mat-select
                [(ngModel)]="selectedEmpresa.processo"
                [disabled]="!isEditing"
                placeholder="Selecione um processo"
              >
                <mat-option value="">-- Selecione --</mat-option>
                <mat-option value="Abertura">Abertura</mat-option>
                <mat-option value="Alteração">Alteração</mat-option>
                <mat-option value="Baixa">Baixa</mat-option>
                <mat-option
                  *ngIf="selectedEmpresa.processo && !processoOptions.includes(selectedEmpresa.processo)"
                  [value]="selectedEmpresa.processo"
                >
                  {{ selectedEmpresa.processo }}
                </mat-option>
              </mat-select>
            </mat-form-field>
          </div>
          <label>Deseja colocar nos lembretes ou urgentes?</label>
          <label>Selecionar abaixo</label>
          <div class="form-group">
            <label for="lembrete">Lembrete</label>
            <select id="lembrete" [(ngModel)]="selectedEmpresa.lembrete" [disabled]="!isEditing">
              <option [ngValue]="null">Selecione</option>
              <option [ngValue]="true">Sim</option>
              <option [ngValue]="false">Não</option>
            </select>
          </div>
          <div class="form-group">
            <label for="prioridade">Prioridade</label>
            <select id="prioridade" [(ngModel)]="selectedEmpresa.prioridade" [disabled]="!isEditing">
              <option [ngValue]="null">Selecione</option>
              <option [ngValue]="true">Sim</option>
              <option [ngValue]="false">Não</option>
            </select>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select
              id="status"
              class="form-control"
              [(ngModel)]="selectedEmpresa.status"
              [disabled]="!isEditing"
            >
              <option value="" [selected]="!selectedEmpresa.status">Selecione um status</option>
              <option *ngFor="let status of statusList" [value]="status.Descricao">
                {{ status.Descricao }}
              </option>
            </select>
          </div>
          <div class="date-field-group">
            <label>Data Motivo</label>
            <mat-form-field appearance="fill">
              <input
                matInput
                [matDatepicker]="motivoPicker"
                [(ngModel)]="selectedEmpresa.datamotivo"
                [disabled]="!isEditing"
                placeholder="DD/MM/YYYY"
              />
              <mat-datepicker-toggle matSuffix [for]="motivoPicker"></mat-datepicker-toggle>
              <mat-datepicker #motivoPicker></mat-datepicker>
            </mat-form-field>
          </div>
          <div class="date-field-group">
            <label>Data Exclusão Social</label>
            <mat-form-field appearance="fill">
              <input
                matInput
                [matDatepicker]="excSocialPicker"
                [(ngModel)]="selectedEmpresa.dataexcsocial"
                [disabled]="!isEditing"
                placeholder="DD/MM/YYYY"
              />
              <mat-datepicker-toggle matSuffix [for]="excSocialPicker"></mat-datepicker-toggle>
              <mat-datepicker #excSocialPicker></mat-datepicker>
            </mat-form-field>
          </div>
          <div class="form-group">
            <label>Geral</label>
            <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.geral" [disabled]="!isEditing"></textarea>
          </div>
          <div class="form-group">
            <label>Procedimento</label>
            <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.procedimento" [disabled]="!isEditing"></textarea>
          </div>
          <div class="form-group">
            <label>Motivo</label>
            <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.motivo" [disabled]="!isEditing"></textarea>
          </div>
          <div class="form-group">
            <label>Eventos</label>
            <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.eventos" [disabled]="!isEditing"></textarea>
            <button class="btn-action" (click)="openEventosSelector()" *ngIf="isEditing">
              Selecionar Eventos
            </button>
          </div>
          <div class="form-group">
            <label>Número Alteração</label>
            <input [(ngModel)]="selectedEmpresa.nalteracao" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Sistema Externo</label>
            <input [(ngModel)]="selectedEmpresa.sistemaexterno" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Sede</label>
            <input [(ngModel)]="selectedEmpresa.sede" [disabled]="!isEditing" />
          </div>
        </div>

        <!-- Dados Cadastrais -->
        <div *ngSwitchCase="2" class="form-section">
          <mat-tab-group [(selectedIndex)]="dadosSubMenu">
            <mat-tab label="Endereço">
              <div class="form-group">
                <label>Endereço</label>
                <input [(ngModel)]="selectedEmpresa.endereco" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Número</label>
                <input [(ngModel)]="selectedEmpresa.endnumero" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Bairro</label>
                <input [(ngModel)]="selectedEmpresa.endbairro" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Complemento</label>
                <input [(ngModel)]="selectedEmpresa.endcomplemento" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>CEP</label>
                <input [(ngModel)]="selectedEmpresa.endcep" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Cidade</label>
                <input [(ngModel)]="selectedEmpresa.endcidade" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Estado</label>
                <input [(ngModel)]="selectedEmpresa.endestado" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>País</label>
                <input [(ngModel)]="selectedEmpresa.endpais" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Telefone 1</label>
                <input [(ngModel)]="selectedEmpresa.emptel1" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Telefone 2</label>
                <input [(ngModel)]="selectedEmpresa.emptel2" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Email</label>
                <input [(ngModel)]="selectedEmpresa.empemail" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Página Web</label>
                <input [(ngModel)]="selectedEmpresa.paginaweb" [disabled]="!isEditing" />
              </div>
              <div class="date-field-group">
                <label>Data Endereço</label>
                <mat-form-field appearance="fill">
                  <input
                    matInput
                    [matDatepicker]="endDataPicker"
                    [(ngModel)]="selectedEmpresa.enddata"
                    [disabled]="!isEditing"
                    placeholder="DD/MM/YYYY"
                  />
                  <mat-datepicker-toggle matSuffix [for]="endDataPicker"></mat-datepicker-toggle>
                  <mat-datepicker #endDataPicker></mat-datepicker>
                </mat-form-field>
              </div>
              <div class="form-group">
                <label>Zona</label>
                <input [(ngModel)]="selectedEmpresa.endzona" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Quadra</label>
                <input [(ngModel)]="selectedEmpresa.endquadra" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Área</label>
                <input [(ngModel)]="selectedEmpresa.area" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Área 2</label>
                <input [(ngModel)]="selectedEmpresa.area2" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Cadastro Imobiliário</label>
                <input [(ngModel)]="selectedEmpresa.cadimob" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Ponto de Referência</label>
                <input [(ngModel)]="selectedEmpresa.pontodereferencia" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Tipo Unidade Produtiva</label>
                <input [(ngModel)]="selectedEmpresa.tipounidadeprodutiva" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Forma de Atuação</label>
                <input [(ngModel)]="selectedEmpresa.formadeatuacao" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Dados Complementares Estabelecimento</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.dadoscomplestabelecimento" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>Ajuda Tipo de Unidade</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.ajudatipodeunidade" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>Tem Endereço Antigo</label>
                <input [(ngModel)]="selectedEmpresa.temenderecoantigoemp" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Endereço Antigo</label>
                <input [(ngModel)]="selectedEmpresa.enderecoantigoemp" [disabled]="!isEditing" />
              </div>
            </mat-tab>
            <mat-tab label="Ramo de Atividade">
              <div class="form-group">
                <label>CNAE Principal</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.cnaeprincipal" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>CNAE Secundário</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.cnaesecundario" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>Ramo de Atividade</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.ramodeatividade" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>CNAE Atividade no Local</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.cnaeatividadenolocal" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>CNAE Atv Local Principal</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.cnaeatvlocalprincipal" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>CNAE Atv Local Secundários</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.cnaeatvlocalsecundarios" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>Dados Complementares Atividade</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.dadoscomplatividade" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>CNAE Descrição Oficial</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.cnaedescricaooficial" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>Objeto do Estabelecimento</label>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.objetodoestabelecimento" [disabled]="!isEditing"></textarea>
              </div>
            </mat-tab>
            <mat-tab label="Sócios">
              <!-- Botão para importar sócio responsável -->
              <button class="btn-action" (click)="abrirModalSocios('responsavel')">Importar Sócio Responsável</button>
              <div class="form-group">
                <label>CPF Responsável</label>
                <input [(ngModel)]="selectedEmpresa.cpfresponsavel" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Nome Responsável</label>
                <input [(ngModel)]="selectedEmpresa.nomeresponsavel" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>RG Responsável</label>
                <input [(ngModel)]="selectedEmpresa.resprg" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Órgão RG Responsável</label>
                <input [(ngModel)]="selectedEmpresa.responsavelorgaorg" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Estado Órgão RG Responsável</label>
                <input [(ngModel)]="selectedEmpresa.responsavelestadoorgaorg" [disabled]="!isEditing" />
              </div>
              <div class="date-field-group">
                <label>Data Nascimento Responsável</label>
                <mat-form-field appearance="fill">
                  <input
                    matInput
                    [matDatepicker]="respNascPicker"
                    [(ngModel)]="selectedEmpresa.respdatanasc"
                    [disabled]="!isEditing"
                    placeholder="DD/MM/YYYY"
                  />
                  <mat-datepicker-toggle matSuffix [for]="respNascPicker"></mat-datepicker-toggle>
                  <mat-datepicker #respNascPicker></mat-datepicker>
                </mat-form-field>
              </div>
              <div class="form-group">
                <label>Número CNH</label>
                <input [(ngModel)]="selectedEmpresa.cnhnumero" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Expedição CNH</label>
                <input [(ngModel)]="selectedEmpresa.cnhexp" [disabled]="!isEditing" />
              </div>
              <div class="date-field-group">
                <label>Data Expedição CNH</label>
                <mat-form-field appearance="fill">
                  <input
                    matInput
                    [matDatepicker]="cnhPicker"
                    [(ngModel)]="selectedEmpresa.cnhdataexp"
                    [disabled]="!isEditing"
                    placeholder="DD/MM/YYYY"
                  />
                  <mat-datepicker-toggle matSuffix [for]="cnhPicker"></mat-datepicker-toggle>
                  <mat-datepicker #cnhPicker></mat-datepicker>
                </mat-form-field>
              </div>
              <div class="form-group">
                <label>Mãe Responsável</label>
                <input [(ngModel)]="selectedEmpresa.respmae" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Pai Responsável</label>
                <input [(ngModel)]="selectedEmpresa.resppai" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Dados Sócios</label>
                <!-- Botão para importar dados sócios -->
                <button class="btn-action" (click)="abrirModalSocios('dadossocios')">Importar Dados Sócios</button>
                <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.dadossocios" [disabled]="!isEditing"></textarea>
              </div>
              <div class="form-group">
                <label>Quantidade Sócios</label>
                <input [(ngModel)]="selectedEmpresa.quantidadesocios" [disabled]="!isEditing" />
              </div>
              <!-- Exemplo de visualização dos sócios -->
              <div class="socios-lista">
                <div *ngFor="let texto of sociosSeparados">
                  <div class="socio-bloco">
                    <!-- AVISO DE MENOR -->
                    <span *ngIf="isMenorDeIdade(texto)" class="menor-alerta">
                      ⚠️ Menor de idade
                    </span>
                    <!-- RESUMO DAS CLASSIFICAÇÕES DOS MENORES -->
                    <div *ngIf="isMenorDeIdade(texto)" class="menor-explicacao">
                      <strong>Classificação dos menores no contrato social:</strong>
                      <ul>
                        <li><b>Menor Impúbere</b> (menos de 16 anos): <br>
                          <small>Necessita de <b>representação</b> (pais ou tutor assinam por ele).</small>
                        </li>
                        <li><b>Menor Púbere</b> (16 a 18 anos não emancipado): <br>
                          <small>Necessita de <b>assistência</b> (assina junto com responsável).</small>
                        </li>
                        <li><b>Menor Emancipado</b>: <br>
                          <small>Pode assinar sozinho, como maior de idade.</small>
                        </li>
                      </ul>
                      <span class="menor-dica">
                        <b>Dica:</b> O contrato social deve indicar claramente a condição do menor.
                      </span>
                    </div>
                    <pre>{{ texto }}</pre>
                    <button (click)="copyTextoPrincipalSocio(texto)">Copiar texto principal</button>
                  </div>
                </div>
              </div>
            </mat-tab>
            <mat-tab label="Capital Social">
              <div class="form-group">
                <label>Capital Social</label>
                <input [(ngModel)]="selectedEmpresa.capitals" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Capital Inicial</label>
                <input [(ngModel)]="selectedEmpresa.capitali" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Capital Social Antigo</label>
                <input [(ngModel)]="selectedEmpresa.capitalsocialantigo" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Capital Antigo Mudou</label>
                <input [(ngModel)]="selectedEmpresa.capitalantigomudou" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Divisão Capital Sócios</label>
                <input [(ngModel)]="selectedEmpresa.divisaocapitalsocios" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Capital Quota Valor</label>
                <input [(ngModel)]="selectedEmpresa.capitalquotavalor" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Capital Quota Total</label>
                <input [(ngModel)]="selectedEmpresa.capitaquotatotal" [disabled]="!isEditing" />
              </div>
            </mat-tab>
            <mat-tab label="Razão Social">
              <div class="form-group">
                <label>Nova Razão Social 1</label>
                <input [(ngModel)]="selectedEmpresa.novarazaosocial1" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Nova Razão Social 2</label>
                <input [(ngModel)]="selectedEmpresa.novarazaosocial2" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Nova Razão Social 3</label>
                <input [(ngModel)]="selectedEmpresa.novarazaosocial3" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Nova Razão Social</label>
                <input [(ngModel)]="selectedEmpresa.novarazaosocial" [disabled]="!isEditing" />
              </div>
              <div class="form-group">
                <label>Nova Razão Social Final</label>
                <input [(ngModel)]="selectedEmpresa.novarazaosocialfinal" [disabled]="!isEditing" />
              </div>
            </mat-tab>
          </mat-tab-group>
        </div>

        <!-- Empresa Fácil -->
<div *ngSwitchCase="3" class="form-section empresa-facil-container">
  <div class="empresa-facil-content">
    <!-- Seção de Datas Principais -->
    <div class="key-dates">
      <div class="date-field-group">
        <label>Início Processo Empresa Fácil</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="dataprotjuntacomercialPicker"
            [(ngModel)]="selectedEmpresa.dataprotjuntacomercial"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="dataprotjuntacomercialPicker"></mat-datepicker-toggle>
          <mat-datepicker #dataprotjuntacomercialPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div>
        <label>Protocolo Junta Comercial</label>
        <input [(ngModel)]="selectedEmpresa.protocolojuntacomercial" />
        <button mat-button (click)="copyToClipboard(selectedEmpresa.protocolojuntacomercial || '')">Copiar</button>
        <button mat-button color="primary" (click)="consultarProtocoloJunta()">Consultar</button>
      </div>
      <div class="date-field-group">
        <label>Protocolado Empresa Fácil dia:</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="protjuntafinalPicker"
            [(ngModel)]="selectedEmpresa.protjuntafinal"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="protjuntafinalPicker"></mat-datepicker-toggle>
          <mat-datepicker #protjuntafinalPicker></mat-datepicker>
        </mat-form-field>
      </div>
    </div>

    <!-- Abas (NIRE, Arquivos, Anexo, Ajuda) -->
    <div class="tabs-container">
      <mat-tab-group [(selectedIndex)]="empresaFacilTab">
        <mat-tab label="NIRE">
          <div class="form-group">
            <label>NIRE</label>
            <input [(ngModel)]="selectedEmpresa.nire" [disabled]="!isEditing" />
          </div>
          <div class="date-field-group">
            <label>Data registro do NIRE</label>
            <mat-form-field appearance="fill">
              <input
                matInput
                [matDatepicker]="nirePicker"
                [(ngModel)]="selectedEmpresa.niredata"
                [disabled]="!isEditing"
                placeholder="DD/MM/YYYY"
              />
              <mat-datepicker-toggle matSuffix [for]="nirePicker"></mat-datepicker-toggle>
              <mat-datepicker #nirePicker></mat-datepicker>
            </mat-form-field>
          </div>
          <div class="form-group">
            <label>NIRE Alt</label>
            <input [(ngModel)]="selectedEmpresa.altprot" [disabled]="!isEditing" />
          </div>
          <div class="form-group">
            <label>Número Registro Alt</label>
            <input [(ngModel)]="selectedEmpresa.nregistroalt" [disabled]="!isEditing" />
          </div>
          <div class="date-field-group">
            <label>Data Registro Alt</label>
            <mat-form-field appearance="fill">
              <input
                matInput
                [matDatepicker]="registroAltPicker"
                [(ngModel)]="selectedEmpresa.dataregistroalt"
                [disabled]="!isEditing"
                placeholder="DD/MM/YYYY"
              />
              <mat-datepicker-toggle matSuffix [for]="registroAltPicker"></mat-datepicker-toggle>
              <mat-datepicker #registroAltPicker></mat-datepicker>
            </mat-form-field>
          </div>
        </mat-tab>
        <mat-tab label="Arquivos">
          <div class="form-group">
            <label>Arquivo Contrato</label>
            <input [(ngModel)]="selectedEmpresa.arquivocontrato" [disabled]="!isEditing" #arquivoContratoInput />
            <button mat-button (click)="copyToClipboard(arquivoContratoInput.value)">
              <mat-icon>content_copy</mat-icon> Copiar
            </button>
            <button mat-button (click)="downloadWindowsShortcut(arquivoContratoInput.value, 'Arquivo_Contrato')">
              <mat-icon>download</mat-icon> Baixar Atalho
            </button>
          </div>
          <div class="form-group">
            <label>Pasta Contratos</label>
            <input [(ngModel)]="selectedEmpresa.pastadocumentos" [disabled]="!isEditing" #documentosContratosInput />
            <button mat-button (click)="copyToClipboard(documentosContratosInput.value)">
              <mat-icon>content_copy</mat-icon> Copiar
            </button>
            <button mat-button (click)="downloadWindowsShortcut(documentosContratosInput.value, 'Documentos_Contratos')">
              <mat-icon>download</mat-icon> Baixar Atalho
            </button>
          </div>
        </mat-tab>
        <mat-tab label="Anexo">
          <div class="form-group">
            <label for="doccontratos">Contrato (PDF)</label>
            <input
              type="file"
              id="doccontratos"
              accept="application/pdf"
              (change)="onFileSelected($event)"
              [disabled]="!isEditing"
            />
            <div *ngIf="selectedEmpresa.doccontratos">
              <a [href]="getFileUrl()" download="contrato.pdf">Baixar Contrato</a>
            </div>
          </div>
        </mat-tab>
        <mat-tab label="Ajuda">
          <!-- A aba Ajuda agora está vazia, mas mantida para futuras adições -->
          <div class="form-group">
            <label>Informações Adicionais</label>
            <p>Insira aqui informações adicionais, se necessário.</p>
          </div>
        </mat-tab>
      </mat-tab-group>
    </div>

    <!-- Campo Junta OBS (movido para baixo de tudo) -->
    <div class="form-group junta-obs">
      <label>Junta OBS</label>
      <textarea class="textarea-large" [(ngModel)]="selectedEmpresa.juntaobs" [disabled]="!isEditing"></textarea>
    </div>
  </div>
</div>

    <!-- Receita Federal -->
    <div *ngSwitchCase="4" class="form-section">
      <div class="date-field-group">
        <label>Data Protocolo REDESIM</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="redesimPicker"
            [(ngModel)]="selectedEmpresa.dataprotredesim"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="redesimPicker"></mat-datepicker-toggle>
          <mat-datepicker #redesimPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="form-group">
        <label>Protocolo REDESIM</label>
        <input [(ngModel)]="selectedEmpresa.protocoloredesim" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>DBE Protocolo</label>
        <input [(ngModel)]="selectedEmpresa.dbeprotocolo" [disabled]="!isEditing" #dbeProtocoloInput />
        <button mat-button (click)="copyToClipboard(dbeProtocoloInput.value)">Copiar</button>
        <button mat-button color="primary" (click)="consultarFederal()">Consultar</button>
      </div>
      <div class="form-group">
        <label>Federal Protocolo</label>
        <input [(ngModel)]="selectedEmpresa.federalprotocolo" [disabled]="!isEditing" />
      </div>
      <div class="date-field-group">
        <label>DBE Data</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="dbePicker"
            [(ngModel)]="selectedEmpresa.dbedata"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="dbePicker"></mat-datepicker-toggle>
          <mat-datepicker #dbePicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="form-group">
        <label>Redesim OBS</label>
        <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.redesimobs" [disabled]="!isEditing"></textarea>
      </div>
    </div>

    <!-- Receita Estadual -->
    <div *ngSwitchCase="5" class="form-section">
      <div class="date-field-group">
        <label>Data Pedido IE</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="pedidoIePicker"
            [(ngModel)]="selectedEmpresa.datapedidoie"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="pedidoIePicker"></mat-datepicker-toggle>
          <mat-datepicker #pedidoIePicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="date-field-group">
        <label>IE Início Atividade</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="ieInicioPicker"
            [(ngModel)]="selectedEmpresa.ieinicioatividade"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="ieInicioPicker"></mat-datepicker-toggle>
          <mat-datepicker #ieInicioPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="form-group">
        <label>IE Vencimento Pedido</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="ieVencPicker"
            [(ngModel)]="selectedEmpresa.ievencpedido"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="ieVencPicker"></mat-datepicker-toggle>
          <mat-datepicker #ieVencPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="date-field-group">
        <label>IE Data Alt Solicitado</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="ieAltSolicitadoPicker"
            [(ngModel)]="selectedEmpresa.iedataaltsolicitado"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="ieAltSolicitadoPicker"></mat-datepicker-toggle>
          <mat-datepicker #ieAltSolicitadoPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="form-group">
        <label>IE Junta</label>
        <input [(ngModel)]="selectedEmpresa.iejunta" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>IE Online</label>
        <input [(ngModel)]="selectedEmpresa.ieonline" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>IE Tipo</label>
        <input [(ngModel)]="selectedEmpresa.ietipo" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>IE Comprovante</label>
        <input [(ngModel)]="selectedEmpresa.iecomprovante" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>IE e-Proc Número</label>
        <input [(ngModel)]="selectedEmpresa.ieeprocnum" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>Número Processo</label>
        <input [(ngModel)]="selectedEmpresa.numeroprocesso" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>Recibo Processo</label>
        <input [(ngModel)]="selectedEmpresa.reciboprocesso" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>Estadual OBS</label>
        <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.estadualobs" [disabled]="!isEditing"></textarea>
      </div>
    </div>

    <!-- Simples Nacional -->
    <div *ngSwitchCase="6" class="form-section">
      <div class="date-field-group">
        <label>Data Simples</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="simplesPicker"
            [(ngModel)]="selectedEmpresa.datasimples"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="simplesPicker"></mat-datepicker-toggle>
          <mat-datepicker #simplesPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="date-field-group">
        <label>Data Última Def Simples</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="ultDefSimplesPicker"
            [(ngModel)]="selectedEmpresa.dataultdefsimples"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="ultDefSimplesPicker"></mat-datepicker-toggle>
          <mat-datepicker #ultDefSimplesPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="form-group">
        <label>Simples e-CAC</label>
        <input [(ngModel)]="selectedEmpresa.simplesecac" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>Código Simples</label>
        <input [(ngModel)]="selectedEmpresa.codigosimples" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>Prazo Simples</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="prazoSimplesPicker"
            [(ngModel)]="selectedEmpresa.prazosimples"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="prazoSimplesPicker"></mat-datepicker-toggle>
          <mat-datepicker #prazoSimplesPicker></mat-datepicker>
        </mat-form-field>
      </div>
      <div class="form-group">
        <label>Órgão Ped Simples</label>
        <input [(ngModel)]="selectedEmpresa.orgaopedsimples" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>OBS Simples</label>
        <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.obssimples" [disabled]="!isEditing"></textarea>
      </div>
    </div>

    <!-- Prefeitura -->
    <div *ngSwitchCase="7" class="form-section">
      <mat-tab-group>
        <mat-tab label="Bombeiros">
          <div class="form-group">
            <label>Observações Prefeitura</label>
            <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.prefeituraobs" [disabled]="!isEditing"></textarea>
          </div>
        </mat-tab>
      </mat-tab-group>
    </div>

    <!-- Senhas -->
    <div *ngSwitchCase="8" class="form-section">
      <div class="form-group">
        <label>Senha Gov</label>
        <input [(ngModel)]="selectedEmpresa.senhagov" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>Senhas de Acesso</label>
        <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.senhasdeacesso" [disabled]="!isEditing"></textarea>
      </div>
    </div>

    <!-- Procurações -->
    <div *ngSwitchCase="9" class="form-section">
      <div class="form-group">
        <label>Procuração</label>
        <input [(ngModel)]="selectedEmpresa.procuracao" [disabled]="!isEditing" />
      </div>
      <div class="form-group">
        <label>Número Procuração</label>
        <input [(ngModel)]="selectedEmpresa.procuracaon" [disabled]="!isEditing" />
      </div>
      <div class="date-field-group">
        <label>Data Procuração</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="procuraPicker"
            [(ngModel)]="selectedEmpresa.procuracaodata"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="procuraPicker"></mat-datepicker-toggle>
          <mat-datepicker #procuraPicker></mat-datepicker>
        </mat-form-field>
      </div>
    </div>

    <!-- Avisos -->
    <div *ngSwitchCase="10" class="form-section">
      <div class="date-field-group">
        <label>Avisar Dia</label>
        <mat-form-field appearance="fill">
          <input
            matInput
            [matDatepicker]="avisarPicker"
            [(ngModel)]="selectedEmpresa.avisardia"
            [disabled]="!isEditing"
            placeholder="DD/MM/YYYY"
          />
          <mat-datepicker-toggle matSuffix [for]="avisarPicker"></mat-datepicker-toggle>
          <mat-datepicker #avisarPicker></mat-datepicker>
        </mat-form-field>
        <span>{{ formatBR(selectedEmpresa.avisardia || null) }}</span>
      </div>
      <div class="form-group">
        <label for="avisarempresa">Avisar Empresa</label>
        <select id="avisarempresa" [(ngModel)]="selectedEmpresa.avisarempresa" [disabled]="!isEditing">
          <option [ngValue]="null">Selecione</option>
          <option [ngValue]="true">Sim</option>
          <option [ngValue]="false">Não</option>
        </select>
      </div>
      <div class="form-group" *ngIf="selectedEmpresa.avisarempresa === true">
        <label>Texto Aviso Empresa</label>
        <textarea class="textarea-custom" [(ngModel)]="selectedEmpresa.avisarempresatexto" [disabled]="!isEditing"></textarea>
      </div>
    </div>

    <!-- Histórico -->
    <div *ngSwitchCase="11" class="form-section">
      <div class="form-group">
        <label>Histórico</label>
        <textarea class="textarea-large" [(ngModel)]="selectedEmpresa.historico" [disabled]="!isEditing"></textarea>
      </div>
    </div>
  </ng-container>
</div>
</div>

<!-- Menu Direito Fixo -->
<div class="right-menu">
  <button class="btn-action btn-novo" (click)="onNovo()">Novo</button>
  <button class="btn-action btn-editar" (click)="onEditarCancelar()">{{ isEditing ? 'Cancelar' : 'Editar' }}</button>
  <button class="btn-action btn-salvar" *ngIf="isEditing" (click)="onSalvar()">Salvar</button>
  <button class="btn-action btn-excluir" (click)="onExcluir()">Excluir</button>
  <button class="btn-action btn-fechar" (click)="onFechar()">Fechar</button>
  <div class="shortcuts">
    <button class="btn-action" (click)="novaAlteracao()">Nova Alteração</button>
    <button class="btn-action" (click)="exportarEmpresaResumida()">Exportar Resumida</button>
    <button class="btn-action" (click)="exportarEmpresaCompleta()">Exportar Completa</button>
  </div>
</div>

<!-- Eventos Selector -->
<app-eventos-selector
  *ngIf="showEventosSelector"
  [isEditing]="isEditing"
  [hasSelectedItem]="!!selectedEmpresa"
  (eventosEnviados)="updateEventos($event)"
  (close)="closeEventosSelector()"
></app-eventos-selector>

<!-- Modal de Seleção de Sócios -->
<div *ngIf="showSociosSelector" class="modal-backdrop" (click)="fecharModalSocios()">
  <div class="modal-content" (click)="$event.stopPropagation()">
    <h3>Selecionar Sócio</h3>
    <input [(ngModel)]="buscaSocio" placeholder="Buscar sócio..." class="input-busca"/>
    <ul class="lista-socios">
      <li *ngFor="let socio of sociosFiltrados()">
        <span>{{ socio.nomecompleto }} - {{ socio.cpf }}</span>
        <button (click)="onImportarSocioModal(socio)">Importar</button>
        <button (click)="onEditarSocio(socio)">Editar</button>
      </li>
    </ul>
    <button (click)="onNovoSocio()">Novo Sócio</button>
    <button (click)="fecharModalSocios()">Fechar</button>
  </div>
</div>

</div>

<ng-template #loadingTemplate>
  <div class="loading">Carregando...</div>
</ng-template>